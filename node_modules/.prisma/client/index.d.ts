
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Contact_form
 * 
 */
export type Contact_form = $Result.DefaultSelection<Prisma.$Contact_formPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Cart_items
 * 
 */
export type Cart_items = $Result.DefaultSelection<Prisma.$Cart_itemsPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Product_image
 * 
 */
export type Product_image = $Result.DefaultSelection<Prisma.$Product_imagePayload>
/**
 * Model Product_category
 * 
 */
export type Product_category = $Result.DefaultSelection<Prisma.$Product_categoryPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Shipping_address
 * 
 */
export type Shipping_address = $Result.DefaultSelection<Prisma.$Shipping_addressPayload>
/**
 * Model Payment_method
 * 
 */
export type Payment_method = $Result.DefaultSelection<Prisma.$Payment_methodPayload>
/**
 * Model Shipping_method
 * 
 */
export type Shipping_method = $Result.DefaultSelection<Prisma.$Shipping_methodPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Order_items
 * 
 */
export type Order_items = $Result.DefaultSelection<Prisma.$Order_itemsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  MEMBER: 'MEMBER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const OrderStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Contact_forms
 * const contact_forms = await prisma.contact_form.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Contact_forms
   * const contact_forms = await prisma.contact_form.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.contact_form`: Exposes CRUD operations for the **Contact_form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contact_forms
    * const contact_forms = await prisma.contact_form.findMany()
    * ```
    */
  get contact_form(): Prisma.Contact_formDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.cart_items`: Exposes CRUD operations for the **Cart_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cart_items
    * const cart_items = await prisma.cart_items.findMany()
    * ```
    */
  get cart_items(): Prisma.Cart_itemsDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.product_image`: Exposes CRUD operations for the **Product_image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_images
    * const product_images = await prisma.product_image.findMany()
    * ```
    */
  get product_image(): Prisma.Product_imageDelegate<ExtArgs>;

  /**
   * `prisma.product_category`: Exposes CRUD operations for the **Product_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_categories
    * const product_categories = await prisma.product_category.findMany()
    * ```
    */
  get product_category(): Prisma.Product_categoryDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.shipping_address`: Exposes CRUD operations for the **Shipping_address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shipping_addresses
    * const shipping_addresses = await prisma.shipping_address.findMany()
    * ```
    */
  get shipping_address(): Prisma.Shipping_addressDelegate<ExtArgs>;

  /**
   * `prisma.payment_method`: Exposes CRUD operations for the **Payment_method** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_methods
    * const payment_methods = await prisma.payment_method.findMany()
    * ```
    */
  get payment_method(): Prisma.Payment_methodDelegate<ExtArgs>;

  /**
   * `prisma.shipping_method`: Exposes CRUD operations for the **Shipping_method** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shipping_methods
    * const shipping_methods = await prisma.shipping_method.findMany()
    * ```
    */
  get shipping_method(): Prisma.Shipping_methodDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.order_items`: Exposes CRUD operations for the **Order_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_items
    * const order_items = await prisma.order_items.findMany()
    * ```
    */
  get order_items(): Prisma.Order_itemsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Contact_form: 'Contact_form',
    User: 'User',
    Cart_items: 'Cart_items',
    Product: 'Product',
    Product_image: 'Product_image',
    Product_category: 'Product_category',
    Category: 'Category',
    Shipping_address: 'Shipping_address',
    Payment_method: 'Payment_method',
    Shipping_method: 'Shipping_method',
    Order: 'Order',
    Order_items: 'Order_items'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'contact_form' | 'user' | 'cart_items' | 'product' | 'product_image' | 'product_category' | 'category' | 'shipping_address' | 'payment_method' | 'shipping_method' | 'order' | 'order_items'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Contact_form: {
        payload: Prisma.$Contact_formPayload<ExtArgs>
        fields: Prisma.Contact_formFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Contact_formFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Contact_formFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          findFirst: {
            args: Prisma.Contact_formFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Contact_formFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          findMany: {
            args: Prisma.Contact_formFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>[]
          }
          create: {
            args: Prisma.Contact_formCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          createMany: {
            args: Prisma.Contact_formCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Contact_formDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          update: {
            args: Prisma.Contact_formUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          deleteMany: {
            args: Prisma.Contact_formDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Contact_formUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Contact_formUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Contact_formPayload>
          }
          aggregate: {
            args: Prisma.Contact_formAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContact_form>
          }
          groupBy: {
            args: Prisma.Contact_formGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Contact_formGroupByOutputType>[]
          }
          count: {
            args: Prisma.Contact_formCountArgs<ExtArgs>,
            result: $Utils.Optional<Contact_formCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Cart_items: {
        payload: Prisma.$Cart_itemsPayload<ExtArgs>
        fields: Prisma.Cart_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Cart_itemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Cart_itemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          findFirst: {
            args: Prisma.Cart_itemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Cart_itemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          findMany: {
            args: Prisma.Cart_itemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>[]
          }
          create: {
            args: Prisma.Cart_itemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          createMany: {
            args: Prisma.Cart_itemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Cart_itemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          update: {
            args: Prisma.Cart_itemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          deleteMany: {
            args: Prisma.Cart_itemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Cart_itemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Cart_itemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cart_itemsPayload>
          }
          aggregate: {
            args: Prisma.Cart_itemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCart_items>
          }
          groupBy: {
            args: Prisma.Cart_itemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cart_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.Cart_itemsCountArgs<ExtArgs>,
            result: $Utils.Optional<Cart_itemsCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Product_image: {
        payload: Prisma.$Product_imagePayload<ExtArgs>
        fields: Prisma.Product_imageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Product_imageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Product_imageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          findFirst: {
            args: Prisma.Product_imageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Product_imageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          findMany: {
            args: Prisma.Product_imageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>[]
          }
          create: {
            args: Prisma.Product_imageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          createMany: {
            args: Prisma.Product_imageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Product_imageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          update: {
            args: Prisma.Product_imageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          deleteMany: {
            args: Prisma.Product_imageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Product_imageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Product_imageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_imagePayload>
          }
          aggregate: {
            args: Prisma.Product_imageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_image>
          }
          groupBy: {
            args: Prisma.Product_imageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_imageGroupByOutputType>[]
          }
          count: {
            args: Prisma.Product_imageCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_imageCountAggregateOutputType> | number
          }
        }
      }
      Product_category: {
        payload: Prisma.$Product_categoryPayload<ExtArgs>
        fields: Prisma.Product_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Product_categoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Product_categoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          findFirst: {
            args: Prisma.Product_categoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Product_categoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          findMany: {
            args: Prisma.Product_categoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>[]
          }
          create: {
            args: Prisma.Product_categoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          createMany: {
            args: Prisma.Product_categoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Product_categoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          update: {
            args: Prisma.Product_categoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          deleteMany: {
            args: Prisma.Product_categoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Product_categoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Product_categoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Product_categoryPayload>
          }
          aggregate: {
            args: Prisma.Product_categoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_category>
          }
          groupBy: {
            args: Prisma.Product_categoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.Product_categoryCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_categoryCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Shipping_address: {
        payload: Prisma.$Shipping_addressPayload<ExtArgs>
        fields: Prisma.Shipping_addressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Shipping_addressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Shipping_addressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          findFirst: {
            args: Prisma.Shipping_addressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Shipping_addressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          findMany: {
            args: Prisma.Shipping_addressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>[]
          }
          create: {
            args: Prisma.Shipping_addressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          createMany: {
            args: Prisma.Shipping_addressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Shipping_addressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          update: {
            args: Prisma.Shipping_addressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          deleteMany: {
            args: Prisma.Shipping_addressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Shipping_addressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Shipping_addressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_addressPayload>
          }
          aggregate: {
            args: Prisma.Shipping_addressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShipping_address>
          }
          groupBy: {
            args: Prisma.Shipping_addressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Shipping_addressGroupByOutputType>[]
          }
          count: {
            args: Prisma.Shipping_addressCountArgs<ExtArgs>,
            result: $Utils.Optional<Shipping_addressCountAggregateOutputType> | number
          }
        }
      }
      Payment_method: {
        payload: Prisma.$Payment_methodPayload<ExtArgs>
        fields: Prisma.Payment_methodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Payment_methodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Payment_methodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          findFirst: {
            args: Prisma.Payment_methodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Payment_methodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          findMany: {
            args: Prisma.Payment_methodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>[]
          }
          create: {
            args: Prisma.Payment_methodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          createMany: {
            args: Prisma.Payment_methodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Payment_methodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          update: {
            args: Prisma.Payment_methodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          deleteMany: {
            args: Prisma.Payment_methodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Payment_methodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Payment_methodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Payment_methodPayload>
          }
          aggregate: {
            args: Prisma.Payment_methodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_method>
          }
          groupBy: {
            args: Prisma.Payment_methodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_methodGroupByOutputType>[]
          }
          count: {
            args: Prisma.Payment_methodCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_methodCountAggregateOutputType> | number
          }
        }
      }
      Shipping_method: {
        payload: Prisma.$Shipping_methodPayload<ExtArgs>
        fields: Prisma.Shipping_methodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Shipping_methodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Shipping_methodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          findFirst: {
            args: Prisma.Shipping_methodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Shipping_methodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          findMany: {
            args: Prisma.Shipping_methodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>[]
          }
          create: {
            args: Prisma.Shipping_methodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          createMany: {
            args: Prisma.Shipping_methodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Shipping_methodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          update: {
            args: Prisma.Shipping_methodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          deleteMany: {
            args: Prisma.Shipping_methodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Shipping_methodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Shipping_methodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Shipping_methodPayload>
          }
          aggregate: {
            args: Prisma.Shipping_methodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShipping_method>
          }
          groupBy: {
            args: Prisma.Shipping_methodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Shipping_methodGroupByOutputType>[]
          }
          count: {
            args: Prisma.Shipping_methodCountArgs<ExtArgs>,
            result: $Utils.Optional<Shipping_methodCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Order_items: {
        payload: Prisma.$Order_itemsPayload<ExtArgs>
        fields: Prisma.Order_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Order_itemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Order_itemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          findFirst: {
            args: Prisma.Order_itemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Order_itemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          findMany: {
            args: Prisma.Order_itemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>[]
          }
          create: {
            args: Prisma.Order_itemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          createMany: {
            args: Prisma.Order_itemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Order_itemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          update: {
            args: Prisma.Order_itemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          deleteMany: {
            args: Prisma.Order_itemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Order_itemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Order_itemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Order_itemsPayload>
          }
          aggregate: {
            args: Prisma.Order_itemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder_items>
          }
          groupBy: {
            args: Prisma.Order_itemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Order_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.Order_itemsCountArgs<ExtArgs>,
            result: $Utils.Optional<Order_itemsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Shipping_address: number
    Orders: number
    Cart_items: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Shipping_address?: boolean | UserCountOutputTypeCountShipping_addressArgs
    Orders?: boolean | UserCountOutputTypeCountOrdersArgs
    Cart_items?: boolean | UserCountOutputTypeCountCart_itemsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShipping_addressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Shipping_addressWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCart_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Cart_itemsWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    Cart_items: number
    Product_category: number
    Product_image: number
    Order_items: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Cart_items?: boolean | ProductCountOutputTypeCountCart_itemsArgs
    Product_category?: boolean | ProductCountOutputTypeCountProduct_categoryArgs
    Product_image?: boolean | ProductCountOutputTypeCountProduct_imageArgs
    Order_items?: boolean | ProductCountOutputTypeCountOrder_itemsArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCart_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Cart_itemsWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProduct_categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Product_categoryWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProduct_imageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Product_imageWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Order_itemsWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    Product_category: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Product_category?: boolean | CategoryCountOutputTypeCountProduct_categoryArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProduct_categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Product_categoryWhereInput
  }



  /**
   * Count Type Shipping_addressCountOutputType
   */

  export type Shipping_addressCountOutputType = {
    Orders: number
  }

  export type Shipping_addressCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Orders?: boolean | Shipping_addressCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * Shipping_addressCountOutputType without action
   */
  export type Shipping_addressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_addressCountOutputType
     */
    select?: Shipping_addressCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Shipping_addressCountOutputType without action
   */
  export type Shipping_addressCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type Payment_methodCountOutputType
   */

  export type Payment_methodCountOutputType = {
    Orders: number
  }

  export type Payment_methodCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Orders?: boolean | Payment_methodCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * Payment_methodCountOutputType without action
   */
  export type Payment_methodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_methodCountOutputType
     */
    select?: Payment_methodCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Payment_methodCountOutputType without action
   */
  export type Payment_methodCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type Shipping_methodCountOutputType
   */

  export type Shipping_methodCountOutputType = {
    Orders: number
  }

  export type Shipping_methodCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Orders?: boolean | Shipping_methodCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * Shipping_methodCountOutputType without action
   */
  export type Shipping_methodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_methodCountOutputType
     */
    select?: Shipping_methodCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Shipping_methodCountOutputType without action
   */
  export type Shipping_methodCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    Order_items: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Order_items?: boolean | OrderCountOutputTypeCountOrder_itemsArgs
  }

  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Order_itemsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Contact_form
   */

  export type AggregateContact_form = {
    _count: Contact_formCountAggregateOutputType | null
    _avg: Contact_formAvgAggregateOutputType | null
    _sum: Contact_formSumAggregateOutputType | null
    _min: Contact_formMinAggregateOutputType | null
    _max: Contact_formMaxAggregateOutputType | null
  }

  export type Contact_formAvgAggregateOutputType = {
    id: number | null
  }

  export type Contact_formSumAggregateOutputType = {
    id: number | null
  }

  export type Contact_formMinAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
    message: string | null
  }

  export type Contact_formMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
    message: string | null
  }

  export type Contact_formCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    message: number
    _all: number
  }


  export type Contact_formAvgAggregateInputType = {
    id?: true
  }

  export type Contact_formSumAggregateInputType = {
    id?: true
  }

  export type Contact_formMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    message?: true
  }

  export type Contact_formMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    message?: true
  }

  export type Contact_formCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    message?: true
    _all?: true
  }

  export type Contact_formAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact_form to aggregate.
     */
    where?: Contact_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contact_forms to fetch.
     */
    orderBy?: Contact_formOrderByWithRelationInput | Contact_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Contact_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contact_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contact_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contact_forms
    **/
    _count?: true | Contact_formCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Contact_formAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Contact_formSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Contact_formMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Contact_formMaxAggregateInputType
  }

  export type GetContact_formAggregateType<T extends Contact_formAggregateArgs> = {
        [P in keyof T & keyof AggregateContact_form]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact_form[P]>
      : GetScalarType<T[P], AggregateContact_form[P]>
  }




  export type Contact_formGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Contact_formWhereInput
    orderBy?: Contact_formOrderByWithAggregationInput | Contact_formOrderByWithAggregationInput[]
    by: Contact_formScalarFieldEnum[] | Contact_formScalarFieldEnum
    having?: Contact_formScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Contact_formCountAggregateInputType | true
    _avg?: Contact_formAvgAggregateInputType
    _sum?: Contact_formSumAggregateInputType
    _min?: Contact_formMinAggregateInputType
    _max?: Contact_formMaxAggregateInputType
  }

  export type Contact_formGroupByOutputType = {
    id: number
    name: string
    phone: string
    email: string
    message: string
    _count: Contact_formCountAggregateOutputType | null
    _avg: Contact_formAvgAggregateOutputType | null
    _sum: Contact_formSumAggregateOutputType | null
    _min: Contact_formMinAggregateOutputType | null
    _max: Contact_formMaxAggregateOutputType | null
  }

  type GetContact_formGroupByPayload<T extends Contact_formGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Contact_formGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Contact_formGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Contact_formGroupByOutputType[P]>
            : GetScalarType<T[P], Contact_formGroupByOutputType[P]>
        }
      >
    >


  export type Contact_formSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact_form"]>

  export type Contact_formSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    message?: boolean
  }


  export type $Contact_formPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Contact_form"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      phone: string
      email: string
      message: string
    }, ExtArgs["result"]["contact_form"]>
    composites: {}
  }


  type Contact_formGetPayload<S extends boolean | null | undefined | Contact_formDefaultArgs> = $Result.GetResult<Prisma.$Contact_formPayload, S>

  type Contact_formCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Contact_formFindManyArgs, 'select' | 'include'> & {
      select?: Contact_formCountAggregateInputType | true
    }

  export interface Contact_formDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact_form'], meta: { name: 'Contact_form' } }
    /**
     * Find zero or one Contact_form that matches the filter.
     * @param {Contact_formFindUniqueArgs} args - Arguments to find a Contact_form
     * @example
     * // Get one Contact_form
     * const contact_form = await prisma.contact_form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Contact_formFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formFindUniqueArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contact_form that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Contact_formFindUniqueOrThrowArgs} args - Arguments to find a Contact_form
     * @example
     * // Get one Contact_form
     * const contact_form = await prisma.contact_form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Contact_formFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contact_form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formFindFirstArgs} args - Arguments to find a Contact_form
     * @example
     * // Get one Contact_form
     * const contact_form = await prisma.contact_form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Contact_formFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formFindFirstArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contact_form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formFindFirstOrThrowArgs} args - Arguments to find a Contact_form
     * @example
     * // Get one Contact_form
     * const contact_form = await prisma.contact_form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Contact_formFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contact_forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contact_forms
     * const contact_forms = await prisma.contact_form.findMany()
     * 
     * // Get first 10 Contact_forms
     * const contact_forms = await prisma.contact_form.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contact_formWithIdOnly = await prisma.contact_form.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Contact_formFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contact_form.
     * @param {Contact_formCreateArgs} args - Arguments to create a Contact_form.
     * @example
     * // Create one Contact_form
     * const Contact_form = await prisma.contact_form.create({
     *   data: {
     *     // ... data to create a Contact_form
     *   }
     * })
     * 
    **/
    create<T extends Contact_formCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formCreateArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contact_forms.
     *     @param {Contact_formCreateManyArgs} args - Arguments to create many Contact_forms.
     *     @example
     *     // Create many Contact_forms
     *     const contact_form = await prisma.contact_form.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Contact_formCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contact_form.
     * @param {Contact_formDeleteArgs} args - Arguments to delete one Contact_form.
     * @example
     * // Delete one Contact_form
     * const Contact_form = await prisma.contact_form.delete({
     *   where: {
     *     // ... filter to delete one Contact_form
     *   }
     * })
     * 
    **/
    delete<T extends Contact_formDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formDeleteArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contact_form.
     * @param {Contact_formUpdateArgs} args - Arguments to update one Contact_form.
     * @example
     * // Update one Contact_form
     * const contact_form = await prisma.contact_form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Contact_formUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formUpdateArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contact_forms.
     * @param {Contact_formDeleteManyArgs} args - Arguments to filter Contact_forms to delete.
     * @example
     * // Delete a few Contact_forms
     * const { count } = await prisma.contact_form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Contact_formDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Contact_formDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contact_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contact_forms
     * const contact_form = await prisma.contact_form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Contact_formUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact_form.
     * @param {Contact_formUpsertArgs} args - Arguments to update or create a Contact_form.
     * @example
     * // Update or create a Contact_form
     * const contact_form = await prisma.contact_form.upsert({
     *   create: {
     *     // ... data to create a Contact_form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact_form we want to update
     *   }
     * })
    **/
    upsert<T extends Contact_formUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Contact_formUpsertArgs<ExtArgs>>
    ): Prisma__Contact_formClient<$Result.GetResult<Prisma.$Contact_formPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contact_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formCountArgs} args - Arguments to filter Contact_forms to count.
     * @example
     * // Count the number of Contact_forms
     * const count = await prisma.contact_form.count({
     *   where: {
     *     // ... the filter for the Contact_forms we want to count
     *   }
     * })
    **/
    count<T extends Contact_formCountArgs>(
      args?: Subset<T, Contact_formCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Contact_formCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Contact_formAggregateArgs>(args: Subset<T, Contact_formAggregateArgs>): Prisma.PrismaPromise<GetContact_formAggregateType<T>>

    /**
     * Group by Contact_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Contact_formGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Contact_formGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Contact_formGroupByArgs['orderBy'] }
        : { orderBy?: Contact_formGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Contact_formGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContact_formGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact_form model
   */
  readonly fields: Contact_formFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact_form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Contact_formClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contact_form model
   */ 
  interface Contact_formFieldRefs {
    readonly id: FieldRef<"Contact_form", 'Int'>
    readonly name: FieldRef<"Contact_form", 'String'>
    readonly phone: FieldRef<"Contact_form", 'String'>
    readonly email: FieldRef<"Contact_form", 'String'>
    readonly message: FieldRef<"Contact_form", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Contact_form findUnique
   */
  export type Contact_formFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter, which Contact_form to fetch.
     */
    where: Contact_formWhereUniqueInput
  }


  /**
   * Contact_form findUniqueOrThrow
   */
  export type Contact_formFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter, which Contact_form to fetch.
     */
    where: Contact_formWhereUniqueInput
  }


  /**
   * Contact_form findFirst
   */
  export type Contact_formFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter, which Contact_form to fetch.
     */
    where?: Contact_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contact_forms to fetch.
     */
    orderBy?: Contact_formOrderByWithRelationInput | Contact_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contact_forms.
     */
    cursor?: Contact_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contact_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contact_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contact_forms.
     */
    distinct?: Contact_formScalarFieldEnum | Contact_formScalarFieldEnum[]
  }


  /**
   * Contact_form findFirstOrThrow
   */
  export type Contact_formFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter, which Contact_form to fetch.
     */
    where?: Contact_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contact_forms to fetch.
     */
    orderBy?: Contact_formOrderByWithRelationInput | Contact_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contact_forms.
     */
    cursor?: Contact_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contact_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contact_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contact_forms.
     */
    distinct?: Contact_formScalarFieldEnum | Contact_formScalarFieldEnum[]
  }


  /**
   * Contact_form findMany
   */
  export type Contact_formFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter, which Contact_forms to fetch.
     */
    where?: Contact_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contact_forms to fetch.
     */
    orderBy?: Contact_formOrderByWithRelationInput | Contact_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contact_forms.
     */
    cursor?: Contact_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contact_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contact_forms.
     */
    skip?: number
    distinct?: Contact_formScalarFieldEnum | Contact_formScalarFieldEnum[]
  }


  /**
   * Contact_form create
   */
  export type Contact_formCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * The data needed to create a Contact_form.
     */
    data: XOR<Contact_formCreateInput, Contact_formUncheckedCreateInput>
  }


  /**
   * Contact_form createMany
   */
  export type Contact_formCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contact_forms.
     */
    data: Contact_formCreateManyInput | Contact_formCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Contact_form update
   */
  export type Contact_formUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * The data needed to update a Contact_form.
     */
    data: XOR<Contact_formUpdateInput, Contact_formUncheckedUpdateInput>
    /**
     * Choose, which Contact_form to update.
     */
    where: Contact_formWhereUniqueInput
  }


  /**
   * Contact_form updateMany
   */
  export type Contact_formUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contact_forms.
     */
    data: XOR<Contact_formUpdateManyMutationInput, Contact_formUncheckedUpdateManyInput>
    /**
     * Filter which Contact_forms to update
     */
    where?: Contact_formWhereInput
  }


  /**
   * Contact_form upsert
   */
  export type Contact_formUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * The filter to search for the Contact_form to update in case it exists.
     */
    where: Contact_formWhereUniqueInput
    /**
     * In case the Contact_form found by the `where` argument doesn't exist, create a new Contact_form with this data.
     */
    create: XOR<Contact_formCreateInput, Contact_formUncheckedCreateInput>
    /**
     * In case the Contact_form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Contact_formUpdateInput, Contact_formUncheckedUpdateInput>
  }


  /**
   * Contact_form delete
   */
  export type Contact_formDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
    /**
     * Filter which Contact_form to delete.
     */
    where: Contact_formWhereUniqueInput
  }


  /**
   * Contact_form deleteMany
   */
  export type Contact_formDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact_forms to delete
     */
    where?: Contact_formWhereInput
  }


  /**
   * Contact_form without action
   */
  export type Contact_formDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact_form
     */
    select?: Contact_formSelect<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email_address: string | null
    mobile: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    createdAt: Date | null
    updateAt: Date | null
    role: $Enums.UserRole | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email_address: string | null
    mobile: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    createdAt: Date | null
    updateAt: Date | null
    role: $Enums.UserRole | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email_address: number
    mobile: number
    firstName: number
    lastName: number
    password: number
    createdAt: number
    updateAt: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email_address?: true
    mobile?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updateAt?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email_address?: true
    mobile?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updateAt?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email_address?: true
    mobile?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updateAt?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email_address: string | null
    mobile: string | null
    firstName: string
    lastName: string
    password: string
    createdAt: Date
    updateAt: Date
    role: $Enums.UserRole
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email_address?: boolean
    mobile?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    createdAt?: boolean
    updateAt?: boolean
    role?: boolean
    Shipping_address?: boolean | User$Shipping_addressArgs<ExtArgs>
    Orders?: boolean | User$OrdersArgs<ExtArgs>
    Cart_items?: boolean | User$Cart_itemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email_address?: boolean
    mobile?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    createdAt?: boolean
    updateAt?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Shipping_address?: boolean | User$Shipping_addressArgs<ExtArgs>
    Orders?: boolean | User$OrdersArgs<ExtArgs>
    Cart_items?: boolean | User$Cart_itemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Shipping_address: Prisma.$Shipping_addressPayload<ExtArgs>[]
      Orders: Prisma.$OrderPayload<ExtArgs>[]
      Cart_items: Prisma.$Cart_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      email_address: string | null
      mobile: string | null
      firstName: string
      lastName: string
      password: string
      createdAt: Date
      updateAt: Date
      role: $Enums.UserRole
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Shipping_address<T extends User$Shipping_addressArgs<ExtArgs> = {}>(args?: Subset<T, User$Shipping_addressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findMany'> | Null>;

    Orders<T extends User$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    Cart_items<T extends User$Cart_itemsArgs<ExtArgs> = {}>(args?: Subset<T, User$Cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email_address: FieldRef<"User", 'String'>
    readonly mobile: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'UserRole'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Shipping_address
   */
  export type User$Shipping_addressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    where?: Shipping_addressWhereInput
    orderBy?: Shipping_addressOrderByWithRelationInput | Shipping_addressOrderByWithRelationInput[]
    cursor?: Shipping_addressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Shipping_addressScalarFieldEnum | Shipping_addressScalarFieldEnum[]
  }


  /**
   * User.Orders
   */
  export type User$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * User.Cart_items
   */
  export type User$Cart_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    where?: Cart_itemsWhereInput
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    cursor?: Cart_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cart_itemsScalarFieldEnum | Cart_itemsScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Cart_items
   */

  export type AggregateCart_items = {
    _count: Cart_itemsCountAggregateOutputType | null
    _avg: Cart_itemsAvgAggregateOutputType | null
    _sum: Cart_itemsSumAggregateOutputType | null
    _min: Cart_itemsMinAggregateOutputType | null
    _max: Cart_itemsMaxAggregateOutputType | null
  }

  export type Cart_itemsAvgAggregateOutputType = {
    qty: number | null
  }

  export type Cart_itemsSumAggregateOutputType = {
    qty: number | null
  }

  export type Cart_itemsMinAggregateOutputType = {
    id: string | null
    qty: number | null
    productId: string | null
    createdAt: Date | null
    updateAt: Date | null
    userId: string | null
  }

  export type Cart_itemsMaxAggregateOutputType = {
    id: string | null
    qty: number | null
    productId: string | null
    createdAt: Date | null
    updateAt: Date | null
    userId: string | null
  }

  export type Cart_itemsCountAggregateOutputType = {
    id: number
    qty: number
    productId: number
    createdAt: number
    updateAt: number
    userId: number
    _all: number
  }


  export type Cart_itemsAvgAggregateInputType = {
    qty?: true
  }

  export type Cart_itemsSumAggregateInputType = {
    qty?: true
  }

  export type Cart_itemsMinAggregateInputType = {
    id?: true
    qty?: true
    productId?: true
    createdAt?: true
    updateAt?: true
    userId?: true
  }

  export type Cart_itemsMaxAggregateInputType = {
    id?: true
    qty?: true
    productId?: true
    createdAt?: true
    updateAt?: true
    userId?: true
  }

  export type Cart_itemsCountAggregateInputType = {
    id?: true
    qty?: true
    productId?: true
    createdAt?: true
    updateAt?: true
    userId?: true
    _all?: true
  }

  export type Cart_itemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart_items to aggregate.
     */
    where?: Cart_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cart_items to fetch.
     */
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Cart_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cart_items
    **/
    _count?: true | Cart_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cart_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cart_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cart_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cart_itemsMaxAggregateInputType
  }

  export type GetCart_itemsAggregateType<T extends Cart_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateCart_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart_items[P]>
      : GetScalarType<T[P], AggregateCart_items[P]>
  }




  export type Cart_itemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Cart_itemsWhereInput
    orderBy?: Cart_itemsOrderByWithAggregationInput | Cart_itemsOrderByWithAggregationInput[]
    by: Cart_itemsScalarFieldEnum[] | Cart_itemsScalarFieldEnum
    having?: Cart_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cart_itemsCountAggregateInputType | true
    _avg?: Cart_itemsAvgAggregateInputType
    _sum?: Cart_itemsSumAggregateInputType
    _min?: Cart_itemsMinAggregateInputType
    _max?: Cart_itemsMaxAggregateInputType
  }

  export type Cart_itemsGroupByOutputType = {
    id: string
    qty: number
    productId: string
    createdAt: Date
    updateAt: Date
    userId: string | null
    _count: Cart_itemsCountAggregateOutputType | null
    _avg: Cart_itemsAvgAggregateOutputType | null
    _sum: Cart_itemsSumAggregateOutputType | null
    _min: Cart_itemsMinAggregateOutputType | null
    _max: Cart_itemsMaxAggregateOutputType | null
  }

  type GetCart_itemsGroupByPayload<T extends Cart_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cart_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cart_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cart_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Cart_itemsGroupByOutputType[P]>
        }
      >
    >


  export type Cart_itemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qty?: boolean
    productId?: boolean
    createdAt?: boolean
    updateAt?: boolean
    userId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | Cart_items$userArgs<ExtArgs>
  }, ExtArgs["result"]["cart_items"]>

  export type Cart_itemsSelectScalar = {
    id?: boolean
    qty?: boolean
    productId?: boolean
    createdAt?: boolean
    updateAt?: boolean
    userId?: boolean
  }

  export type Cart_itemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | Cart_items$userArgs<ExtArgs>
  }


  export type $Cart_itemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Cart_items"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      qty: number
      productId: string
      createdAt: Date
      updateAt: Date
      userId: string | null
    }, ExtArgs["result"]["cart_items"]>
    composites: {}
  }


  type Cart_itemsGetPayload<S extends boolean | null | undefined | Cart_itemsDefaultArgs> = $Result.GetResult<Prisma.$Cart_itemsPayload, S>

  type Cart_itemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Cart_itemsFindManyArgs, 'select' | 'include'> & {
      select?: Cart_itemsCountAggregateInputType | true
    }

  export interface Cart_itemsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart_items'], meta: { name: 'Cart_items' } }
    /**
     * Find zero or one Cart_items that matches the filter.
     * @param {Cart_itemsFindUniqueArgs} args - Arguments to find a Cart_items
     * @example
     * // Get one Cart_items
     * const cart_items = await prisma.cart_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Cart_itemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsFindUniqueArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cart_items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Cart_itemsFindUniqueOrThrowArgs} args - Arguments to find a Cart_items
     * @example
     * // Get one Cart_items
     * const cart_items = await prisma.cart_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Cart_itemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cart_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsFindFirstArgs} args - Arguments to find a Cart_items
     * @example
     * // Get one Cart_items
     * const cart_items = await prisma.cart_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Cart_itemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsFindFirstArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cart_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsFindFirstOrThrowArgs} args - Arguments to find a Cart_items
     * @example
     * // Get one Cart_items
     * const cart_items = await prisma.cart_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Cart_itemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cart_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cart_items
     * const cart_items = await prisma.cart_items.findMany()
     * 
     * // Get first 10 Cart_items
     * const cart_items = await prisma.cart_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cart_itemsWithIdOnly = await prisma.cart_items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Cart_itemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cart_items.
     * @param {Cart_itemsCreateArgs} args - Arguments to create a Cart_items.
     * @example
     * // Create one Cart_items
     * const Cart_items = await prisma.cart_items.create({
     *   data: {
     *     // ... data to create a Cart_items
     *   }
     * })
     * 
    **/
    create<T extends Cart_itemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsCreateArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cart_items.
     *     @param {Cart_itemsCreateManyArgs} args - Arguments to create many Cart_items.
     *     @example
     *     // Create many Cart_items
     *     const cart_items = await prisma.cart_items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Cart_itemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cart_items.
     * @param {Cart_itemsDeleteArgs} args - Arguments to delete one Cart_items.
     * @example
     * // Delete one Cart_items
     * const Cart_items = await prisma.cart_items.delete({
     *   where: {
     *     // ... filter to delete one Cart_items
     *   }
     * })
     * 
    **/
    delete<T extends Cart_itemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsDeleteArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cart_items.
     * @param {Cart_itemsUpdateArgs} args - Arguments to update one Cart_items.
     * @example
     * // Update one Cart_items
     * const cart_items = await prisma.cart_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Cart_itemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsUpdateArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cart_items.
     * @param {Cart_itemsDeleteManyArgs} args - Arguments to filter Cart_items to delete.
     * @example
     * // Delete a few Cart_items
     * const { count } = await prisma.cart_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Cart_itemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cart_itemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cart_items
     * const cart_items = await prisma.cart_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Cart_itemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart_items.
     * @param {Cart_itemsUpsertArgs} args - Arguments to update or create a Cart_items.
     * @example
     * // Update or create a Cart_items
     * const cart_items = await prisma.cart_items.upsert({
     *   create: {
     *     // ... data to create a Cart_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart_items we want to update
     *   }
     * })
    **/
    upsert<T extends Cart_itemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Cart_itemsUpsertArgs<ExtArgs>>
    ): Prisma__Cart_itemsClient<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsCountArgs} args - Arguments to filter Cart_items to count.
     * @example
     * // Count the number of Cart_items
     * const count = await prisma.cart_items.count({
     *   where: {
     *     // ... the filter for the Cart_items we want to count
     *   }
     * })
    **/
    count<T extends Cart_itemsCountArgs>(
      args?: Subset<T, Cart_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cart_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cart_itemsAggregateArgs>(args: Subset<T, Cart_itemsAggregateArgs>): Prisma.PrismaPromise<GetCart_itemsAggregateType<T>>

    /**
     * Group by Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Cart_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Cart_itemsGroupByArgs['orderBy'] }
        : { orderBy?: Cart_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Cart_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCart_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cart_items model
   */
  readonly fields: Cart_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Cart_itemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends Cart_items$userArgs<ExtArgs> = {}>(args?: Subset<T, Cart_items$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cart_items model
   */ 
  interface Cart_itemsFieldRefs {
    readonly id: FieldRef<"Cart_items", 'String'>
    readonly qty: FieldRef<"Cart_items", 'Int'>
    readonly productId: FieldRef<"Cart_items", 'String'>
    readonly createdAt: FieldRef<"Cart_items", 'DateTime'>
    readonly updateAt: FieldRef<"Cart_items", 'DateTime'>
    readonly userId: FieldRef<"Cart_items", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Cart_items findUnique
   */
  export type Cart_itemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Cart_items to fetch.
     */
    where: Cart_itemsWhereUniqueInput
  }


  /**
   * Cart_items findUniqueOrThrow
   */
  export type Cart_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Cart_items to fetch.
     */
    where: Cart_itemsWhereUniqueInput
  }


  /**
   * Cart_items findFirst
   */
  export type Cart_itemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Cart_items to fetch.
     */
    where?: Cart_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cart_items to fetch.
     */
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cart_items.
     */
    cursor?: Cart_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cart_items.
     */
    distinct?: Cart_itemsScalarFieldEnum | Cart_itemsScalarFieldEnum[]
  }


  /**
   * Cart_items findFirstOrThrow
   */
  export type Cart_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Cart_items to fetch.
     */
    where?: Cart_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cart_items to fetch.
     */
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cart_items.
     */
    cursor?: Cart_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cart_items.
     */
    distinct?: Cart_itemsScalarFieldEnum | Cart_itemsScalarFieldEnum[]
  }


  /**
   * Cart_items findMany
   */
  export type Cart_itemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Cart_items to fetch.
     */
    where?: Cart_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cart_items to fetch.
     */
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cart_items.
     */
    cursor?: Cart_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cart_items.
     */
    skip?: number
    distinct?: Cart_itemsScalarFieldEnum | Cart_itemsScalarFieldEnum[]
  }


  /**
   * Cart_items create
   */
  export type Cart_itemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Cart_items.
     */
    data: XOR<Cart_itemsCreateInput, Cart_itemsUncheckedCreateInput>
  }


  /**
   * Cart_items createMany
   */
  export type Cart_itemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cart_items.
     */
    data: Cart_itemsCreateManyInput | Cart_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cart_items update
   */
  export type Cart_itemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Cart_items.
     */
    data: XOR<Cart_itemsUpdateInput, Cart_itemsUncheckedUpdateInput>
    /**
     * Choose, which Cart_items to update.
     */
    where: Cart_itemsWhereUniqueInput
  }


  /**
   * Cart_items updateMany
   */
  export type Cart_itemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cart_items.
     */
    data: XOR<Cart_itemsUpdateManyMutationInput, Cart_itemsUncheckedUpdateManyInput>
    /**
     * Filter which Cart_items to update
     */
    where?: Cart_itemsWhereInput
  }


  /**
   * Cart_items upsert
   */
  export type Cart_itemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Cart_items to update in case it exists.
     */
    where: Cart_itemsWhereUniqueInput
    /**
     * In case the Cart_items found by the `where` argument doesn't exist, create a new Cart_items with this data.
     */
    create: XOR<Cart_itemsCreateInput, Cart_itemsUncheckedCreateInput>
    /**
     * In case the Cart_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Cart_itemsUpdateInput, Cart_itemsUncheckedUpdateInput>
  }


  /**
   * Cart_items delete
   */
  export type Cart_itemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    /**
     * Filter which Cart_items to delete.
     */
    where: Cart_itemsWhereUniqueInput
  }


  /**
   * Cart_items deleteMany
   */
  export type Cart_itemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart_items to delete
     */
    where?: Cart_itemsWhereInput
  }


  /**
   * Cart_items.user
   */
  export type Cart_items$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Cart_items without action
   */
  export type Cart_itemsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: Decimal | null
    stock: number | null
    menu_order: number | null
  }

  export type ProductSumAggregateOutputType = {
    price: Decimal | null
    stock: number | null
    menu_order: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: Decimal | null
    SKU: string | null
    brand: string | null
    stock: number | null
    desc: string | null
    menu_order: number | null
    isFeatured: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: Decimal | null
    SKU: string | null
    brand: string | null
    stock: number | null
    desc: string | null
    menu_order: number | null
    isFeatured: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    price: number
    SKU: number
    brand: number
    stock: number
    desc: number
    menu_order: number
    isFeatured: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
    stock?: true
    menu_order?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
    stock?: true
    menu_order?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    SKU?: true
    brand?: true
    stock?: true
    desc?: true
    menu_order?: true
    isFeatured?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    SKU?: true
    brand?: true
    stock?: true
    desc?: true
    menu_order?: true
    isFeatured?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    SKU?: true
    brand?: true
    stock?: true
    desc?: true
    menu_order?: true
    isFeatured?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    price: Decimal
    SKU: string
    brand: string | null
    stock: number | null
    desc: string | null
    menu_order: number | null
    isFeatured: boolean | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    SKU?: boolean
    brand?: boolean
    stock?: boolean
    desc?: boolean
    menu_order?: boolean
    isFeatured?: boolean
    Cart_items?: boolean | Product$Cart_itemsArgs<ExtArgs>
    Product_category?: boolean | Product$Product_categoryArgs<ExtArgs>
    Product_image?: boolean | Product$Product_imageArgs<ExtArgs>
    Order_items?: boolean | Product$Order_itemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    SKU?: boolean
    brand?: boolean
    stock?: boolean
    desc?: boolean
    menu_order?: boolean
    isFeatured?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Cart_items?: boolean | Product$Cart_itemsArgs<ExtArgs>
    Product_category?: boolean | Product$Product_categoryArgs<ExtArgs>
    Product_image?: boolean | Product$Product_imageArgs<ExtArgs>
    Order_items?: boolean | Product$Order_itemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      Cart_items: Prisma.$Cart_itemsPayload<ExtArgs>[]
      Product_category: Prisma.$Product_categoryPayload<ExtArgs>[]
      Product_image: Prisma.$Product_imagePayload<ExtArgs>[]
      Order_items: Prisma.$Order_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      price: Prisma.Decimal
      SKU: string
      brand: string | null
      stock: number | null
      desc: string | null
      menu_order: number | null
      isFeatured: boolean | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cart_items<T extends Product$Cart_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$Cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cart_itemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Product_category<T extends Product$Product_categoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$Product_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    Product_image<T extends Product$Product_imageArgs<ExtArgs> = {}>(args?: Subset<T, Product$Product_imageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findMany'> | Null>;

    Order_items<T extends Product$Order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$Order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Decimal'>
    readonly SKU: FieldRef<"Product", 'String'>
    readonly brand: FieldRef<"Product", 'String'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly desc: FieldRef<"Product", 'String'>
    readonly menu_order: FieldRef<"Product", 'Int'>
    readonly isFeatured: FieldRef<"Product", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.Cart_items
   */
  export type Product$Cart_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart_items
     */
    select?: Cart_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Cart_itemsInclude<ExtArgs> | null
    where?: Cart_itemsWhereInput
    orderBy?: Cart_itemsOrderByWithRelationInput | Cart_itemsOrderByWithRelationInput[]
    cursor?: Cart_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cart_itemsScalarFieldEnum | Cart_itemsScalarFieldEnum[]
  }


  /**
   * Product.Product_category
   */
  export type Product$Product_categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    where?: Product_categoryWhereInput
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    cursor?: Product_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }


  /**
   * Product.Product_image
   */
  export type Product$Product_imageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    where?: Product_imageWhereInput
    orderBy?: Product_imageOrderByWithRelationInput | Product_imageOrderByWithRelationInput[]
    cursor?: Product_imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_imageScalarFieldEnum | Product_imageScalarFieldEnum[]
  }


  /**
   * Product.Order_items
   */
  export type Product$Order_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    where?: Order_itemsWhereInput
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    cursor?: Order_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model Product_image
   */

  export type AggregateProduct_image = {
    _count: Product_imageCountAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  export type Product_imageMinAggregateOutputType = {
    id: string | null
    image_url: string | null
    productId: string | null
  }

  export type Product_imageMaxAggregateOutputType = {
    id: string | null
    image_url: string | null
    productId: string | null
  }

  export type Product_imageCountAggregateOutputType = {
    id: number
    image_url: number
    productId: number
    _all: number
  }


  export type Product_imageMinAggregateInputType = {
    id?: true
    image_url?: true
    productId?: true
  }

  export type Product_imageMaxAggregateInputType = {
    id?: true
    image_url?: true
    productId?: true
  }

  export type Product_imageCountAggregateInputType = {
    id?: true
    image_url?: true
    productId?: true
    _all?: true
  }

  export type Product_imageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product_image to aggregate.
     */
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     */
    orderBy?: Product_imageOrderByWithRelationInput | Product_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Product_images
    **/
    _count?: true | Product_imageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_imageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_imageMaxAggregateInputType
  }

  export type GetProduct_imageAggregateType<T extends Product_imageAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_image]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_image[P]>
      : GetScalarType<T[P], AggregateProduct_image[P]>
  }




  export type Product_imageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Product_imageWhereInput
    orderBy?: Product_imageOrderByWithAggregationInput | Product_imageOrderByWithAggregationInput[]
    by: Product_imageScalarFieldEnum[] | Product_imageScalarFieldEnum
    having?: Product_imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_imageCountAggregateInputType | true
    _min?: Product_imageMinAggregateInputType
    _max?: Product_imageMaxAggregateInputType
  }

  export type Product_imageGroupByOutputType = {
    id: string
    image_url: string
    productId: string
    _count: Product_imageCountAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  type GetProduct_imageGroupByPayload<T extends Product_imageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_imageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_imageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
            : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
        }
      >
    >


  export type Product_imageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_url?: boolean
    productId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_image"]>

  export type Product_imageSelectScalar = {
    id?: boolean
    image_url?: boolean
    productId?: boolean
  }

  export type Product_imageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $Product_imagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Product_image"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      image_url: string
      productId: string
    }, ExtArgs["result"]["product_image"]>
    composites: {}
  }


  type Product_imageGetPayload<S extends boolean | null | undefined | Product_imageDefaultArgs> = $Result.GetResult<Prisma.$Product_imagePayload, S>

  type Product_imageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Product_imageFindManyArgs, 'select' | 'include'> & {
      select?: Product_imageCountAggregateInputType | true
    }

  export interface Product_imageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product_image'], meta: { name: 'Product_image' } }
    /**
     * Find zero or one Product_image that matches the filter.
     * @param {Product_imageFindUniqueArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Product_imageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageFindUniqueArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Product_imageFindUniqueOrThrowArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Product_imageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageFindFirstArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Product_imageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageFindFirstArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageFindFirstOrThrowArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Product_imageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_images
     * const product_images = await prisma.product_image.findMany()
     * 
     * // Get first 10 Product_images
     * const product_images = await prisma.product_image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_imageWithIdOnly = await prisma.product_image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Product_imageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_image.
     * @param {Product_imageCreateArgs} args - Arguments to create a Product_image.
     * @example
     * // Create one Product_image
     * const Product_image = await prisma.product_image.create({
     *   data: {
     *     // ... data to create a Product_image
     *   }
     * })
     * 
    **/
    create<T extends Product_imageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageCreateArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_images.
     *     @param {Product_imageCreateManyArgs} args - Arguments to create many Product_images.
     *     @example
     *     // Create many Product_images
     *     const product_image = await prisma.product_image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Product_imageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_image.
     * @param {Product_imageDeleteArgs} args - Arguments to delete one Product_image.
     * @example
     * // Delete one Product_image
     * const Product_image = await prisma.product_image.delete({
     *   where: {
     *     // ... filter to delete one Product_image
     *   }
     * })
     * 
    **/
    delete<T extends Product_imageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageDeleteArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_image.
     * @param {Product_imageUpdateArgs} args - Arguments to update one Product_image.
     * @example
     * // Update one Product_image
     * const product_image = await prisma.product_image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Product_imageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageUpdateArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_images.
     * @param {Product_imageDeleteManyArgs} args - Arguments to filter Product_images to delete.
     * @example
     * // Delete a few Product_images
     * const { count } = await prisma.product_image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Product_imageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_imageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_images
     * const product_image = await prisma.product_image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Product_imageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_image.
     * @param {Product_imageUpsertArgs} args - Arguments to update or create a Product_image.
     * @example
     * // Update or create a Product_image
     * const product_image = await prisma.product_image.upsert({
     *   create: {
     *     // ... data to create a Product_image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_image we want to update
     *   }
     * })
    **/
    upsert<T extends Product_imageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Product_imageUpsertArgs<ExtArgs>>
    ): Prisma__Product_imageClient<$Result.GetResult<Prisma.$Product_imagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageCountArgs} args - Arguments to filter Product_images to count.
     * @example
     * // Count the number of Product_images
     * const count = await prisma.product_image.count({
     *   where: {
     *     // ... the filter for the Product_images we want to count
     *   }
     * })
    **/
    count<T extends Product_imageCountArgs>(
      args?: Subset<T, Product_imageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_imageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_imageAggregateArgs>(args: Subset<T, Product_imageAggregateArgs>): Prisma.PrismaPromise<GetProduct_imageAggregateType<T>>

    /**
     * Group by Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_imageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_imageGroupByArgs['orderBy'] }
        : { orderBy?: Product_imageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_imageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product_image model
   */
  readonly fields: Product_imageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product_image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Product_imageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product_image model
   */ 
  interface Product_imageFieldRefs {
    readonly id: FieldRef<"Product_image", 'String'>
    readonly image_url: FieldRef<"Product_image", 'String'>
    readonly productId: FieldRef<"Product_image", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Product_image findUnique
   */
  export type Product_imageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter, which Product_image to fetch.
     */
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image findUniqueOrThrow
   */
  export type Product_imageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter, which Product_image to fetch.
     */
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image findFirst
   */
  export type Product_imageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter, which Product_image to fetch.
     */
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     */
    orderBy?: Product_imageOrderByWithRelationInput | Product_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_images.
     */
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_images.
     */
    distinct?: Product_imageScalarFieldEnum | Product_imageScalarFieldEnum[]
  }


  /**
   * Product_image findFirstOrThrow
   */
  export type Product_imageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter, which Product_image to fetch.
     */
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     */
    orderBy?: Product_imageOrderByWithRelationInput | Product_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_images.
     */
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_images.
     */
    distinct?: Product_imageScalarFieldEnum | Product_imageScalarFieldEnum[]
  }


  /**
   * Product_image findMany
   */
  export type Product_imageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter, which Product_images to fetch.
     */
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     */
    orderBy?: Product_imageOrderByWithRelationInput | Product_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Product_images.
     */
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     */
    skip?: number
    distinct?: Product_imageScalarFieldEnum | Product_imageScalarFieldEnum[]
  }


  /**
   * Product_image create
   */
  export type Product_imageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * The data needed to create a Product_image.
     */
    data: XOR<Product_imageCreateInput, Product_imageUncheckedCreateInput>
  }


  /**
   * Product_image createMany
   */
  export type Product_imageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Product_images.
     */
    data: Product_imageCreateManyInput | Product_imageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product_image update
   */
  export type Product_imageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * The data needed to update a Product_image.
     */
    data: XOR<Product_imageUpdateInput, Product_imageUncheckedUpdateInput>
    /**
     * Choose, which Product_image to update.
     */
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image updateMany
   */
  export type Product_imageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Product_images.
     */
    data: XOR<Product_imageUpdateManyMutationInput, Product_imageUncheckedUpdateManyInput>
    /**
     * Filter which Product_images to update
     */
    where?: Product_imageWhereInput
  }


  /**
   * Product_image upsert
   */
  export type Product_imageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * The filter to search for the Product_image to update in case it exists.
     */
    where: Product_imageWhereUniqueInput
    /**
     * In case the Product_image found by the `where` argument doesn't exist, create a new Product_image with this data.
     */
    create: XOR<Product_imageCreateInput, Product_imageUncheckedCreateInput>
    /**
     * In case the Product_image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Product_imageUpdateInput, Product_imageUncheckedUpdateInput>
  }


  /**
   * Product_image delete
   */
  export type Product_imageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
    /**
     * Filter which Product_image to delete.
     */
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image deleteMany
   */
  export type Product_imageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product_images to delete
     */
    where?: Product_imageWhereInput
  }


  /**
   * Product_image without action
   */
  export type Product_imageDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_image
     */
    select?: Product_imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_imageInclude<ExtArgs> | null
  }



  /**
   * Model Product_category
   */

  export type AggregateProduct_category = {
    _count: Product_categoryCountAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  export type Product_categoryMinAggregateOutputType = {
    id: string | null
    categoryId: string | null
    productId: string | null
  }

  export type Product_categoryMaxAggregateOutputType = {
    id: string | null
    categoryId: string | null
    productId: string | null
  }

  export type Product_categoryCountAggregateOutputType = {
    id: number
    categoryId: number
    productId: number
    _all: number
  }


  export type Product_categoryMinAggregateInputType = {
    id?: true
    categoryId?: true
    productId?: true
  }

  export type Product_categoryMaxAggregateInputType = {
    id?: true
    categoryId?: true
    productId?: true
  }

  export type Product_categoryCountAggregateInputType = {
    id?: true
    categoryId?: true
    productId?: true
    _all?: true
  }

  export type Product_categoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product_category to aggregate.
     */
    where?: Product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_categories to fetch.
     */
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Product_categories
    **/
    _count?: true | Product_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_categoryMaxAggregateInputType
  }

  export type GetProduct_categoryAggregateType<T extends Product_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_category[P]>
      : GetScalarType<T[P], AggregateProduct_category[P]>
  }




  export type Product_categoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Product_categoryWhereInput
    orderBy?: Product_categoryOrderByWithAggregationInput | Product_categoryOrderByWithAggregationInput[]
    by: Product_categoryScalarFieldEnum[] | Product_categoryScalarFieldEnum
    having?: Product_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_categoryCountAggregateInputType | true
    _min?: Product_categoryMinAggregateInputType
    _max?: Product_categoryMaxAggregateInputType
  }

  export type Product_categoryGroupByOutputType = {
    id: string
    categoryId: string
    productId: string
    _count: Product_categoryCountAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  type GetProduct_categoryGroupByPayload<T extends Product_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
        }
      >
    >


  export type Product_categorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    productId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_category"]>

  export type Product_categorySelectScalar = {
    id?: boolean
    categoryId?: boolean
    productId?: boolean
  }

  export type Product_categoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $Product_categoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Product_category"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      categoryId: string
      productId: string
    }, ExtArgs["result"]["product_category"]>
    composites: {}
  }


  type Product_categoryGetPayload<S extends boolean | null | undefined | Product_categoryDefaultArgs> = $Result.GetResult<Prisma.$Product_categoryPayload, S>

  type Product_categoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Product_categoryFindManyArgs, 'select' | 'include'> & {
      select?: Product_categoryCountAggregateInputType | true
    }

  export interface Product_categoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product_category'], meta: { name: 'Product_category' } }
    /**
     * Find zero or one Product_category that matches the filter.
     * @param {Product_categoryFindUniqueArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Product_categoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryFindUniqueArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Product_categoryFindUniqueOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Product_categoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryFindFirstArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Product_categoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryFindFirstArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryFindFirstOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Product_categoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_categories
     * const product_categories = await prisma.product_category.findMany()
     * 
     * // Get first 10 Product_categories
     * const product_categories = await prisma.product_category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_categoryWithIdOnly = await prisma.product_category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Product_categoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_category.
     * @param {Product_categoryCreateArgs} args - Arguments to create a Product_category.
     * @example
     * // Create one Product_category
     * const Product_category = await prisma.product_category.create({
     *   data: {
     *     // ... data to create a Product_category
     *   }
     * })
     * 
    **/
    create<T extends Product_categoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryCreateArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_categories.
     *     @param {Product_categoryCreateManyArgs} args - Arguments to create many Product_categories.
     *     @example
     *     // Create many Product_categories
     *     const product_category = await prisma.product_category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Product_categoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_category.
     * @param {Product_categoryDeleteArgs} args - Arguments to delete one Product_category.
     * @example
     * // Delete one Product_category
     * const Product_category = await prisma.product_category.delete({
     *   where: {
     *     // ... filter to delete one Product_category
     *   }
     * })
     * 
    **/
    delete<T extends Product_categoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryDeleteArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_category.
     * @param {Product_categoryUpdateArgs} args - Arguments to update one Product_category.
     * @example
     * // Update one Product_category
     * const product_category = await prisma.product_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Product_categoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryUpdateArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_categories.
     * @param {Product_categoryDeleteManyArgs} args - Arguments to filter Product_categories to delete.
     * @example
     * // Delete a few Product_categories
     * const { count } = await prisma.product_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Product_categoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Product_categoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_categories
     * const product_category = await prisma.product_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Product_categoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_category.
     * @param {Product_categoryUpsertArgs} args - Arguments to update or create a Product_category.
     * @example
     * // Update or create a Product_category
     * const product_category = await prisma.product_category.upsert({
     *   create: {
     *     // ... data to create a Product_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_category we want to update
     *   }
     * })
    **/
    upsert<T extends Product_categoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Product_categoryUpsertArgs<ExtArgs>>
    ): Prisma__Product_categoryClient<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryCountArgs} args - Arguments to filter Product_categories to count.
     * @example
     * // Count the number of Product_categories
     * const count = await prisma.product_category.count({
     *   where: {
     *     // ... the filter for the Product_categories we want to count
     *   }
     * })
    **/
    count<T extends Product_categoryCountArgs>(
      args?: Subset<T, Product_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_categoryAggregateArgs>(args: Subset<T, Product_categoryAggregateArgs>): Prisma.PrismaPromise<GetProduct_categoryAggregateType<T>>

    /**
     * Group by Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_categoryGroupByArgs['orderBy'] }
        : { orderBy?: Product_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product_category model
   */
  readonly fields: Product_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Product_categoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product_category model
   */ 
  interface Product_categoryFieldRefs {
    readonly id: FieldRef<"Product_category", 'String'>
    readonly categoryId: FieldRef<"Product_category", 'String'>
    readonly productId: FieldRef<"Product_category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Product_category findUnique
   */
  export type Product_categoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which Product_category to fetch.
     */
    where: Product_categoryWhereUniqueInput
  }


  /**
   * Product_category findUniqueOrThrow
   */
  export type Product_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which Product_category to fetch.
     */
    where: Product_categoryWhereUniqueInput
  }


  /**
   * Product_category findFirst
   */
  export type Product_categoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which Product_category to fetch.
     */
    where?: Product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_categories to fetch.
     */
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_categories.
     */
    cursor?: Product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }


  /**
   * Product_category findFirstOrThrow
   */
  export type Product_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which Product_category to fetch.
     */
    where?: Product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_categories to fetch.
     */
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_categories.
     */
    cursor?: Product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }


  /**
   * Product_category findMany
   */
  export type Product_categoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which Product_categories to fetch.
     */
    where?: Product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_categories to fetch.
     */
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Product_categories.
     */
    cursor?: Product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_categories.
     */
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }


  /**
   * Product_category create
   */
  export type Product_categoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Product_category.
     */
    data: XOR<Product_categoryCreateInput, Product_categoryUncheckedCreateInput>
  }


  /**
   * Product_category createMany
   */
  export type Product_categoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Product_categories.
     */
    data: Product_categoryCreateManyInput | Product_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product_category update
   */
  export type Product_categoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Product_category.
     */
    data: XOR<Product_categoryUpdateInput, Product_categoryUncheckedUpdateInput>
    /**
     * Choose, which Product_category to update.
     */
    where: Product_categoryWhereUniqueInput
  }


  /**
   * Product_category updateMany
   */
  export type Product_categoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Product_categories.
     */
    data: XOR<Product_categoryUpdateManyMutationInput, Product_categoryUncheckedUpdateManyInput>
    /**
     * Filter which Product_categories to update
     */
    where?: Product_categoryWhereInput
  }


  /**
   * Product_category upsert
   */
  export type Product_categoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Product_category to update in case it exists.
     */
    where: Product_categoryWhereUniqueInput
    /**
     * In case the Product_category found by the `where` argument doesn't exist, create a new Product_category with this data.
     */
    create: XOR<Product_categoryCreateInput, Product_categoryUncheckedCreateInput>
    /**
     * In case the Product_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Product_categoryUpdateInput, Product_categoryUncheckedUpdateInput>
  }


  /**
   * Product_category delete
   */
  export type Product_categoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    /**
     * Filter which Product_category to delete.
     */
    where: Product_categoryWhereUniqueInput
  }


  /**
   * Product_category deleteMany
   */
  export type Product_categoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product_categories to delete
     */
    where?: Product_categoryWhereInput
  }


  /**
   * Product_category without action
   */
  export type Product_categoryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Product_category?: boolean | Category$Product_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Product_category?: boolean | Category$Product_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      Product_category: Prisma.$Product_categoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Product_category<T extends Category$Product_categoryArgs<ExtArgs> = {}>(args?: Subset<T, Category$Product_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Product_categoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.Product_category
   */
  export type Category$Product_categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_category
     */
    select?: Product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_categoryInclude<ExtArgs> | null
    where?: Product_categoryWhereInput
    orderBy?: Product_categoryOrderByWithRelationInput | Product_categoryOrderByWithRelationInput[]
    cursor?: Product_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model Shipping_address
   */

  export type AggregateShipping_address = {
    _count: Shipping_addressCountAggregateOutputType | null
    _min: Shipping_addressMinAggregateOutputType | null
    _max: Shipping_addressMaxAggregateOutputType | null
  }

  export type Shipping_addressMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    street_address: string | null
    sub_district: string | null
    district: string | null
    province: string | null
    zip: string | null
    userId: string | null
  }

  export type Shipping_addressMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    street_address: string | null
    sub_district: string | null
    district: string | null
    province: string | null
    zip: string | null
    userId: string | null
  }

  export type Shipping_addressCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    firstName: number
    lastName: number
    street_address: number
    sub_district: number
    district: number
    province: number
    zip: number
    userId: number
    _all: number
  }


  export type Shipping_addressMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    street_address?: true
    sub_district?: true
    district?: true
    province?: true
    zip?: true
    userId?: true
  }

  export type Shipping_addressMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    street_address?: true
    sub_district?: true
    district?: true
    province?: true
    zip?: true
    userId?: true
  }

  export type Shipping_addressCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    street_address?: true
    sub_district?: true
    district?: true
    province?: true
    zip?: true
    userId?: true
    _all?: true
  }

  export type Shipping_addressAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipping_address to aggregate.
     */
    where?: Shipping_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_addresses to fetch.
     */
    orderBy?: Shipping_addressOrderByWithRelationInput | Shipping_addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Shipping_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shipping_addresses
    **/
    _count?: true | Shipping_addressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Shipping_addressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Shipping_addressMaxAggregateInputType
  }

  export type GetShipping_addressAggregateType<T extends Shipping_addressAggregateArgs> = {
        [P in keyof T & keyof AggregateShipping_address]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipping_address[P]>
      : GetScalarType<T[P], AggregateShipping_address[P]>
  }




  export type Shipping_addressGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Shipping_addressWhereInput
    orderBy?: Shipping_addressOrderByWithAggregationInput | Shipping_addressOrderByWithAggregationInput[]
    by: Shipping_addressScalarFieldEnum[] | Shipping_addressScalarFieldEnum
    having?: Shipping_addressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Shipping_addressCountAggregateInputType | true
    _min?: Shipping_addressMinAggregateInputType
    _max?: Shipping_addressMaxAggregateInputType
  }

  export type Shipping_addressGroupByOutputType = {
    id: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    userId: string | null
    _count: Shipping_addressCountAggregateOutputType | null
    _min: Shipping_addressMinAggregateOutputType | null
    _max: Shipping_addressMaxAggregateOutputType | null
  }

  type GetShipping_addressGroupByPayload<T extends Shipping_addressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Shipping_addressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Shipping_addressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Shipping_addressGroupByOutputType[P]>
            : GetScalarType<T[P], Shipping_addressGroupByOutputType[P]>
        }
      >
    >


  export type Shipping_addressSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    street_address?: boolean
    sub_district?: boolean
    district?: boolean
    province?: boolean
    zip?: boolean
    userId?: boolean
    user?: boolean | Shipping_address$userArgs<ExtArgs>
    Orders?: boolean | Shipping_address$OrdersArgs<ExtArgs>
    _count?: boolean | Shipping_addressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipping_address"]>

  export type Shipping_addressSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    street_address?: boolean
    sub_district?: boolean
    district?: boolean
    province?: boolean
    zip?: boolean
    userId?: boolean
  }

  export type Shipping_addressInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | Shipping_address$userArgs<ExtArgs>
    Orders?: boolean | Shipping_address$OrdersArgs<ExtArgs>
    _count?: boolean | Shipping_addressCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Shipping_addressPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Shipping_address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      Orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      phone: string
      firstName: string
      lastName: string
      street_address: string
      sub_district: string
      district: string
      province: string
      zip: string
      userId: string | null
    }, ExtArgs["result"]["shipping_address"]>
    composites: {}
  }


  type Shipping_addressGetPayload<S extends boolean | null | undefined | Shipping_addressDefaultArgs> = $Result.GetResult<Prisma.$Shipping_addressPayload, S>

  type Shipping_addressCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Shipping_addressFindManyArgs, 'select' | 'include'> & {
      select?: Shipping_addressCountAggregateInputType | true
    }

  export interface Shipping_addressDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipping_address'], meta: { name: 'Shipping_address' } }
    /**
     * Find zero or one Shipping_address that matches the filter.
     * @param {Shipping_addressFindUniqueArgs} args - Arguments to find a Shipping_address
     * @example
     * // Get one Shipping_address
     * const shipping_address = await prisma.shipping_address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Shipping_addressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressFindUniqueArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shipping_address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Shipping_addressFindUniqueOrThrowArgs} args - Arguments to find a Shipping_address
     * @example
     * // Get one Shipping_address
     * const shipping_address = await prisma.shipping_address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Shipping_addressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shipping_address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressFindFirstArgs} args - Arguments to find a Shipping_address
     * @example
     * // Get one Shipping_address
     * const shipping_address = await prisma.shipping_address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Shipping_addressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressFindFirstArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shipping_address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressFindFirstOrThrowArgs} args - Arguments to find a Shipping_address
     * @example
     * // Get one Shipping_address
     * const shipping_address = await prisma.shipping_address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Shipping_addressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shipping_addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shipping_addresses
     * const shipping_addresses = await prisma.shipping_address.findMany()
     * 
     * // Get first 10 Shipping_addresses
     * const shipping_addresses = await prisma.shipping_address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipping_addressWithIdOnly = await prisma.shipping_address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Shipping_addressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shipping_address.
     * @param {Shipping_addressCreateArgs} args - Arguments to create a Shipping_address.
     * @example
     * // Create one Shipping_address
     * const Shipping_address = await prisma.shipping_address.create({
     *   data: {
     *     // ... data to create a Shipping_address
     *   }
     * })
     * 
    **/
    create<T extends Shipping_addressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressCreateArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shipping_addresses.
     *     @param {Shipping_addressCreateManyArgs} args - Arguments to create many Shipping_addresses.
     *     @example
     *     // Create many Shipping_addresses
     *     const shipping_address = await prisma.shipping_address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Shipping_addressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shipping_address.
     * @param {Shipping_addressDeleteArgs} args - Arguments to delete one Shipping_address.
     * @example
     * // Delete one Shipping_address
     * const Shipping_address = await prisma.shipping_address.delete({
     *   where: {
     *     // ... filter to delete one Shipping_address
     *   }
     * })
     * 
    **/
    delete<T extends Shipping_addressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressDeleteArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shipping_address.
     * @param {Shipping_addressUpdateArgs} args - Arguments to update one Shipping_address.
     * @example
     * // Update one Shipping_address
     * const shipping_address = await prisma.shipping_address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Shipping_addressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressUpdateArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shipping_addresses.
     * @param {Shipping_addressDeleteManyArgs} args - Arguments to filter Shipping_addresses to delete.
     * @example
     * // Delete a few Shipping_addresses
     * const { count } = await prisma.shipping_address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Shipping_addressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_addressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipping_addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shipping_addresses
     * const shipping_address = await prisma.shipping_address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Shipping_addressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shipping_address.
     * @param {Shipping_addressUpsertArgs} args - Arguments to update or create a Shipping_address.
     * @example
     * // Update or create a Shipping_address
     * const shipping_address = await prisma.shipping_address.upsert({
     *   create: {
     *     // ... data to create a Shipping_address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipping_address we want to update
     *   }
     * })
    **/
    upsert<T extends Shipping_addressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_addressUpsertArgs<ExtArgs>>
    ): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shipping_addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressCountArgs} args - Arguments to filter Shipping_addresses to count.
     * @example
     * // Count the number of Shipping_addresses
     * const count = await prisma.shipping_address.count({
     *   where: {
     *     // ... the filter for the Shipping_addresses we want to count
     *   }
     * })
    **/
    count<T extends Shipping_addressCountArgs>(
      args?: Subset<T, Shipping_addressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Shipping_addressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipping_address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Shipping_addressAggregateArgs>(args: Subset<T, Shipping_addressAggregateArgs>): Prisma.PrismaPromise<GetShipping_addressAggregateType<T>>

    /**
     * Group by Shipping_address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_addressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Shipping_addressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Shipping_addressGroupByArgs['orderBy'] }
        : { orderBy?: Shipping_addressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Shipping_addressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipping_addressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shipping_address model
   */
  readonly fields: Shipping_addressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shipping_address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Shipping_addressClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Shipping_address$userArgs<ExtArgs> = {}>(args?: Subset<T, Shipping_address$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Orders<T extends Shipping_address$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Shipping_address$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Shipping_address model
   */ 
  interface Shipping_addressFieldRefs {
    readonly id: FieldRef<"Shipping_address", 'String'>
    readonly email: FieldRef<"Shipping_address", 'String'>
    readonly phone: FieldRef<"Shipping_address", 'String'>
    readonly firstName: FieldRef<"Shipping_address", 'String'>
    readonly lastName: FieldRef<"Shipping_address", 'String'>
    readonly street_address: FieldRef<"Shipping_address", 'String'>
    readonly sub_district: FieldRef<"Shipping_address", 'String'>
    readonly district: FieldRef<"Shipping_address", 'String'>
    readonly province: FieldRef<"Shipping_address", 'String'>
    readonly zip: FieldRef<"Shipping_address", 'String'>
    readonly userId: FieldRef<"Shipping_address", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Shipping_address findUnique
   */
  export type Shipping_addressFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_address to fetch.
     */
    where: Shipping_addressWhereUniqueInput
  }


  /**
   * Shipping_address findUniqueOrThrow
   */
  export type Shipping_addressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_address to fetch.
     */
    where: Shipping_addressWhereUniqueInput
  }


  /**
   * Shipping_address findFirst
   */
  export type Shipping_addressFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_address to fetch.
     */
    where?: Shipping_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_addresses to fetch.
     */
    orderBy?: Shipping_addressOrderByWithRelationInput | Shipping_addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipping_addresses.
     */
    cursor?: Shipping_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipping_addresses.
     */
    distinct?: Shipping_addressScalarFieldEnum | Shipping_addressScalarFieldEnum[]
  }


  /**
   * Shipping_address findFirstOrThrow
   */
  export type Shipping_addressFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_address to fetch.
     */
    where?: Shipping_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_addresses to fetch.
     */
    orderBy?: Shipping_addressOrderByWithRelationInput | Shipping_addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipping_addresses.
     */
    cursor?: Shipping_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipping_addresses.
     */
    distinct?: Shipping_addressScalarFieldEnum | Shipping_addressScalarFieldEnum[]
  }


  /**
   * Shipping_address findMany
   */
  export type Shipping_addressFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_addresses to fetch.
     */
    where?: Shipping_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_addresses to fetch.
     */
    orderBy?: Shipping_addressOrderByWithRelationInput | Shipping_addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shipping_addresses.
     */
    cursor?: Shipping_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_addresses.
     */
    skip?: number
    distinct?: Shipping_addressScalarFieldEnum | Shipping_addressScalarFieldEnum[]
  }


  /**
   * Shipping_address create
   */
  export type Shipping_addressCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * The data needed to create a Shipping_address.
     */
    data: XOR<Shipping_addressCreateInput, Shipping_addressUncheckedCreateInput>
  }


  /**
   * Shipping_address createMany
   */
  export type Shipping_addressCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shipping_addresses.
     */
    data: Shipping_addressCreateManyInput | Shipping_addressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Shipping_address update
   */
  export type Shipping_addressUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * The data needed to update a Shipping_address.
     */
    data: XOR<Shipping_addressUpdateInput, Shipping_addressUncheckedUpdateInput>
    /**
     * Choose, which Shipping_address to update.
     */
    where: Shipping_addressWhereUniqueInput
  }


  /**
   * Shipping_address updateMany
   */
  export type Shipping_addressUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shipping_addresses.
     */
    data: XOR<Shipping_addressUpdateManyMutationInput, Shipping_addressUncheckedUpdateManyInput>
    /**
     * Filter which Shipping_addresses to update
     */
    where?: Shipping_addressWhereInput
  }


  /**
   * Shipping_address upsert
   */
  export type Shipping_addressUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * The filter to search for the Shipping_address to update in case it exists.
     */
    where: Shipping_addressWhereUniqueInput
    /**
     * In case the Shipping_address found by the `where` argument doesn't exist, create a new Shipping_address with this data.
     */
    create: XOR<Shipping_addressCreateInput, Shipping_addressUncheckedCreateInput>
    /**
     * In case the Shipping_address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Shipping_addressUpdateInput, Shipping_addressUncheckedUpdateInput>
  }


  /**
   * Shipping_address delete
   */
  export type Shipping_addressDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
    /**
     * Filter which Shipping_address to delete.
     */
    where: Shipping_addressWhereUniqueInput
  }


  /**
   * Shipping_address deleteMany
   */
  export type Shipping_addressDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipping_addresses to delete
     */
    where?: Shipping_addressWhereInput
  }


  /**
   * Shipping_address.user
   */
  export type Shipping_address$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Shipping_address.Orders
   */
  export type Shipping_address$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Shipping_address without action
   */
  export type Shipping_addressDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_address
     */
    select?: Shipping_addressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_addressInclude<ExtArgs> | null
  }



  /**
   * Model Payment_method
   */

  export type AggregatePayment_method = {
    _count: Payment_methodCountAggregateOutputType | null
    _min: Payment_methodMinAggregateOutputType | null
    _max: Payment_methodMaxAggregateOutputType | null
  }

  export type Payment_methodMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type Payment_methodMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type Payment_methodCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Payment_methodMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Payment_methodMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Payment_methodCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Payment_methodAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment_method to aggregate.
     */
    where?: Payment_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payment_methods to fetch.
     */
    orderBy?: Payment_methodOrderByWithRelationInput | Payment_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Payment_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payment_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payment_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payment_methods
    **/
    _count?: true | Payment_methodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_methodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_methodMaxAggregateInputType
  }

  export type GetPayment_methodAggregateType<T extends Payment_methodAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_method]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_method[P]>
      : GetScalarType<T[P], AggregatePayment_method[P]>
  }




  export type Payment_methodGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Payment_methodWhereInput
    orderBy?: Payment_methodOrderByWithAggregationInput | Payment_methodOrderByWithAggregationInput[]
    by: Payment_methodScalarFieldEnum[] | Payment_methodScalarFieldEnum
    having?: Payment_methodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_methodCountAggregateInputType | true
    _min?: Payment_methodMinAggregateInputType
    _max?: Payment_methodMaxAggregateInputType
  }

  export type Payment_methodGroupByOutputType = {
    id: string
    name: string
    _count: Payment_methodCountAggregateOutputType | null
    _min: Payment_methodMinAggregateOutputType | null
    _max: Payment_methodMaxAggregateOutputType | null
  }

  type GetPayment_methodGroupByPayload<T extends Payment_methodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_methodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_methodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_methodGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_methodGroupByOutputType[P]>
        }
      >
    >


  export type Payment_methodSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Orders?: boolean | Payment_method$OrdersArgs<ExtArgs>
    _count?: boolean | Payment_methodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_method"]>

  export type Payment_methodSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type Payment_methodInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Orders?: boolean | Payment_method$OrdersArgs<ExtArgs>
    _count?: boolean | Payment_methodCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Payment_methodPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Payment_method"
    objects: {
      Orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
    }, ExtArgs["result"]["payment_method"]>
    composites: {}
  }


  type Payment_methodGetPayload<S extends boolean | null | undefined | Payment_methodDefaultArgs> = $Result.GetResult<Prisma.$Payment_methodPayload, S>

  type Payment_methodCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Payment_methodFindManyArgs, 'select' | 'include'> & {
      select?: Payment_methodCountAggregateInputType | true
    }

  export interface Payment_methodDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment_method'], meta: { name: 'Payment_method' } }
    /**
     * Find zero or one Payment_method that matches the filter.
     * @param {Payment_methodFindUniqueArgs} args - Arguments to find a Payment_method
     * @example
     * // Get one Payment_method
     * const payment_method = await prisma.payment_method.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Payment_methodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodFindUniqueArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_method that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Payment_methodFindUniqueOrThrowArgs} args - Arguments to find a Payment_method
     * @example
     * // Get one Payment_method
     * const payment_method = await prisma.payment_method.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Payment_methodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_method that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodFindFirstArgs} args - Arguments to find a Payment_method
     * @example
     * // Get one Payment_method
     * const payment_method = await prisma.payment_method.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Payment_methodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodFindFirstArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_method that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodFindFirstOrThrowArgs} args - Arguments to find a Payment_method
     * @example
     * // Get one Payment_method
     * const payment_method = await prisma.payment_method.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Payment_methodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_methods
     * const payment_methods = await prisma.payment_method.findMany()
     * 
     * // Get first 10 Payment_methods
     * const payment_methods = await prisma.payment_method.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_methodWithIdOnly = await prisma.payment_method.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Payment_methodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_method.
     * @param {Payment_methodCreateArgs} args - Arguments to create a Payment_method.
     * @example
     * // Create one Payment_method
     * const Payment_method = await prisma.payment_method.create({
     *   data: {
     *     // ... data to create a Payment_method
     *   }
     * })
     * 
    **/
    create<T extends Payment_methodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodCreateArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_methods.
     *     @param {Payment_methodCreateManyArgs} args - Arguments to create many Payment_methods.
     *     @example
     *     // Create many Payment_methods
     *     const payment_method = await prisma.payment_method.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Payment_methodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_method.
     * @param {Payment_methodDeleteArgs} args - Arguments to delete one Payment_method.
     * @example
     * // Delete one Payment_method
     * const Payment_method = await prisma.payment_method.delete({
     *   where: {
     *     // ... filter to delete one Payment_method
     *   }
     * })
     * 
    **/
    delete<T extends Payment_methodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodDeleteArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_method.
     * @param {Payment_methodUpdateArgs} args - Arguments to update one Payment_method.
     * @example
     * // Update one Payment_method
     * const payment_method = await prisma.payment_method.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Payment_methodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodUpdateArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_methods.
     * @param {Payment_methodDeleteManyArgs} args - Arguments to filter Payment_methods to delete.
     * @example
     * // Delete a few Payment_methods
     * const { count } = await prisma.payment_method.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Payment_methodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Payment_methodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_methods
     * const payment_method = await prisma.payment_method.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Payment_methodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_method.
     * @param {Payment_methodUpsertArgs} args - Arguments to update or create a Payment_method.
     * @example
     * // Update or create a Payment_method
     * const payment_method = await prisma.payment_method.upsert({
     *   create: {
     *     // ... data to create a Payment_method
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_method we want to update
     *   }
     * })
    **/
    upsert<T extends Payment_methodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Payment_methodUpsertArgs<ExtArgs>>
    ): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodCountArgs} args - Arguments to filter Payment_methods to count.
     * @example
     * // Count the number of Payment_methods
     * const count = await prisma.payment_method.count({
     *   where: {
     *     // ... the filter for the Payment_methods we want to count
     *   }
     * })
    **/
    count<T extends Payment_methodCountArgs>(
      args?: Subset<T, Payment_methodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_methodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_methodAggregateArgs>(args: Subset<T, Payment_methodAggregateArgs>): Prisma.PrismaPromise<GetPayment_methodAggregateType<T>>

    /**
     * Group by Payment_method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_methodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Payment_methodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Payment_methodGroupByArgs['orderBy'] }
        : { orderBy?: Payment_methodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Payment_methodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_methodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment_method model
   */
  readonly fields: Payment_methodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment_method.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Payment_methodClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Orders<T extends Payment_method$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Payment_method$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Payment_method model
   */ 
  interface Payment_methodFieldRefs {
    readonly id: FieldRef<"Payment_method", 'String'>
    readonly name: FieldRef<"Payment_method", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Payment_method findUnique
   */
  export type Payment_methodFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter, which Payment_method to fetch.
     */
    where: Payment_methodWhereUniqueInput
  }


  /**
   * Payment_method findUniqueOrThrow
   */
  export type Payment_methodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter, which Payment_method to fetch.
     */
    where: Payment_methodWhereUniqueInput
  }


  /**
   * Payment_method findFirst
   */
  export type Payment_methodFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter, which Payment_method to fetch.
     */
    where?: Payment_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payment_methods to fetch.
     */
    orderBy?: Payment_methodOrderByWithRelationInput | Payment_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payment_methods.
     */
    cursor?: Payment_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payment_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payment_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payment_methods.
     */
    distinct?: Payment_methodScalarFieldEnum | Payment_methodScalarFieldEnum[]
  }


  /**
   * Payment_method findFirstOrThrow
   */
  export type Payment_methodFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter, which Payment_method to fetch.
     */
    where?: Payment_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payment_methods to fetch.
     */
    orderBy?: Payment_methodOrderByWithRelationInput | Payment_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payment_methods.
     */
    cursor?: Payment_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payment_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payment_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payment_methods.
     */
    distinct?: Payment_methodScalarFieldEnum | Payment_methodScalarFieldEnum[]
  }


  /**
   * Payment_method findMany
   */
  export type Payment_methodFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter, which Payment_methods to fetch.
     */
    where?: Payment_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payment_methods to fetch.
     */
    orderBy?: Payment_methodOrderByWithRelationInput | Payment_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payment_methods.
     */
    cursor?: Payment_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payment_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payment_methods.
     */
    skip?: number
    distinct?: Payment_methodScalarFieldEnum | Payment_methodScalarFieldEnum[]
  }


  /**
   * Payment_method create
   */
  export type Payment_methodCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment_method.
     */
    data: XOR<Payment_methodCreateInput, Payment_methodUncheckedCreateInput>
  }


  /**
   * Payment_method createMany
   */
  export type Payment_methodCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payment_methods.
     */
    data: Payment_methodCreateManyInput | Payment_methodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Payment_method update
   */
  export type Payment_methodUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment_method.
     */
    data: XOR<Payment_methodUpdateInput, Payment_methodUncheckedUpdateInput>
    /**
     * Choose, which Payment_method to update.
     */
    where: Payment_methodWhereUniqueInput
  }


  /**
   * Payment_method updateMany
   */
  export type Payment_methodUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payment_methods.
     */
    data: XOR<Payment_methodUpdateManyMutationInput, Payment_methodUncheckedUpdateManyInput>
    /**
     * Filter which Payment_methods to update
     */
    where?: Payment_methodWhereInput
  }


  /**
   * Payment_method upsert
   */
  export type Payment_methodUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment_method to update in case it exists.
     */
    where: Payment_methodWhereUniqueInput
    /**
     * In case the Payment_method found by the `where` argument doesn't exist, create a new Payment_method with this data.
     */
    create: XOR<Payment_methodCreateInput, Payment_methodUncheckedCreateInput>
    /**
     * In case the Payment_method was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Payment_methodUpdateInput, Payment_methodUncheckedUpdateInput>
  }


  /**
   * Payment_method delete
   */
  export type Payment_methodDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
    /**
     * Filter which Payment_method to delete.
     */
    where: Payment_methodWhereUniqueInput
  }


  /**
   * Payment_method deleteMany
   */
  export type Payment_methodDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment_methods to delete
     */
    where?: Payment_methodWhereInput
  }


  /**
   * Payment_method.Orders
   */
  export type Payment_method$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Payment_method without action
   */
  export type Payment_methodDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_method
     */
    select?: Payment_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Payment_methodInclude<ExtArgs> | null
  }



  /**
   * Model Shipping_method
   */

  export type AggregateShipping_method = {
    _count: Shipping_methodCountAggregateOutputType | null
    _min: Shipping_methodMinAggregateOutputType | null
    _max: Shipping_methodMaxAggregateOutputType | null
  }

  export type Shipping_methodMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type Shipping_methodMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type Shipping_methodCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Shipping_methodMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Shipping_methodMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Shipping_methodCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Shipping_methodAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipping_method to aggregate.
     */
    where?: Shipping_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_methods to fetch.
     */
    orderBy?: Shipping_methodOrderByWithRelationInput | Shipping_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Shipping_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shipping_methods
    **/
    _count?: true | Shipping_methodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Shipping_methodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Shipping_methodMaxAggregateInputType
  }

  export type GetShipping_methodAggregateType<T extends Shipping_methodAggregateArgs> = {
        [P in keyof T & keyof AggregateShipping_method]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipping_method[P]>
      : GetScalarType<T[P], AggregateShipping_method[P]>
  }




  export type Shipping_methodGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Shipping_methodWhereInput
    orderBy?: Shipping_methodOrderByWithAggregationInput | Shipping_methodOrderByWithAggregationInput[]
    by: Shipping_methodScalarFieldEnum[] | Shipping_methodScalarFieldEnum
    having?: Shipping_methodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Shipping_methodCountAggregateInputType | true
    _min?: Shipping_methodMinAggregateInputType
    _max?: Shipping_methodMaxAggregateInputType
  }

  export type Shipping_methodGroupByOutputType = {
    id: string
    name: string
    _count: Shipping_methodCountAggregateOutputType | null
    _min: Shipping_methodMinAggregateOutputType | null
    _max: Shipping_methodMaxAggregateOutputType | null
  }

  type GetShipping_methodGroupByPayload<T extends Shipping_methodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Shipping_methodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Shipping_methodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Shipping_methodGroupByOutputType[P]>
            : GetScalarType<T[P], Shipping_methodGroupByOutputType[P]>
        }
      >
    >


  export type Shipping_methodSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Orders?: boolean | Shipping_method$OrdersArgs<ExtArgs>
    _count?: boolean | Shipping_methodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipping_method"]>

  export type Shipping_methodSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type Shipping_methodInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Orders?: boolean | Shipping_method$OrdersArgs<ExtArgs>
    _count?: boolean | Shipping_methodCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Shipping_methodPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Shipping_method"
    objects: {
      Orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
    }, ExtArgs["result"]["shipping_method"]>
    composites: {}
  }


  type Shipping_methodGetPayload<S extends boolean | null | undefined | Shipping_methodDefaultArgs> = $Result.GetResult<Prisma.$Shipping_methodPayload, S>

  type Shipping_methodCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Shipping_methodFindManyArgs, 'select' | 'include'> & {
      select?: Shipping_methodCountAggregateInputType | true
    }

  export interface Shipping_methodDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipping_method'], meta: { name: 'Shipping_method' } }
    /**
     * Find zero or one Shipping_method that matches the filter.
     * @param {Shipping_methodFindUniqueArgs} args - Arguments to find a Shipping_method
     * @example
     * // Get one Shipping_method
     * const shipping_method = await prisma.shipping_method.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Shipping_methodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodFindUniqueArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shipping_method that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Shipping_methodFindUniqueOrThrowArgs} args - Arguments to find a Shipping_method
     * @example
     * // Get one Shipping_method
     * const shipping_method = await prisma.shipping_method.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Shipping_methodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shipping_method that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodFindFirstArgs} args - Arguments to find a Shipping_method
     * @example
     * // Get one Shipping_method
     * const shipping_method = await prisma.shipping_method.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Shipping_methodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodFindFirstArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shipping_method that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodFindFirstOrThrowArgs} args - Arguments to find a Shipping_method
     * @example
     * // Get one Shipping_method
     * const shipping_method = await prisma.shipping_method.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Shipping_methodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shipping_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shipping_methods
     * const shipping_methods = await prisma.shipping_method.findMany()
     * 
     * // Get first 10 Shipping_methods
     * const shipping_methods = await prisma.shipping_method.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipping_methodWithIdOnly = await prisma.shipping_method.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Shipping_methodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shipping_method.
     * @param {Shipping_methodCreateArgs} args - Arguments to create a Shipping_method.
     * @example
     * // Create one Shipping_method
     * const Shipping_method = await prisma.shipping_method.create({
     *   data: {
     *     // ... data to create a Shipping_method
     *   }
     * })
     * 
    **/
    create<T extends Shipping_methodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodCreateArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shipping_methods.
     *     @param {Shipping_methodCreateManyArgs} args - Arguments to create many Shipping_methods.
     *     @example
     *     // Create many Shipping_methods
     *     const shipping_method = await prisma.shipping_method.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Shipping_methodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shipping_method.
     * @param {Shipping_methodDeleteArgs} args - Arguments to delete one Shipping_method.
     * @example
     * // Delete one Shipping_method
     * const Shipping_method = await prisma.shipping_method.delete({
     *   where: {
     *     // ... filter to delete one Shipping_method
     *   }
     * })
     * 
    **/
    delete<T extends Shipping_methodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodDeleteArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shipping_method.
     * @param {Shipping_methodUpdateArgs} args - Arguments to update one Shipping_method.
     * @example
     * // Update one Shipping_method
     * const shipping_method = await prisma.shipping_method.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Shipping_methodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodUpdateArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shipping_methods.
     * @param {Shipping_methodDeleteManyArgs} args - Arguments to filter Shipping_methods to delete.
     * @example
     * // Delete a few Shipping_methods
     * const { count } = await prisma.shipping_method.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Shipping_methodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Shipping_methodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipping_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shipping_methods
     * const shipping_method = await prisma.shipping_method.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Shipping_methodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shipping_method.
     * @param {Shipping_methodUpsertArgs} args - Arguments to update or create a Shipping_method.
     * @example
     * // Update or create a Shipping_method
     * const shipping_method = await prisma.shipping_method.upsert({
     *   create: {
     *     // ... data to create a Shipping_method
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipping_method we want to update
     *   }
     * })
    **/
    upsert<T extends Shipping_methodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Shipping_methodUpsertArgs<ExtArgs>>
    ): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shipping_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodCountArgs} args - Arguments to filter Shipping_methods to count.
     * @example
     * // Count the number of Shipping_methods
     * const count = await prisma.shipping_method.count({
     *   where: {
     *     // ... the filter for the Shipping_methods we want to count
     *   }
     * })
    **/
    count<T extends Shipping_methodCountArgs>(
      args?: Subset<T, Shipping_methodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Shipping_methodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipping_method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Shipping_methodAggregateArgs>(args: Subset<T, Shipping_methodAggregateArgs>): Prisma.PrismaPromise<GetShipping_methodAggregateType<T>>

    /**
     * Group by Shipping_method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipping_methodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Shipping_methodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Shipping_methodGroupByArgs['orderBy'] }
        : { orderBy?: Shipping_methodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Shipping_methodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipping_methodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shipping_method model
   */
  readonly fields: Shipping_methodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shipping_method.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Shipping_methodClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Orders<T extends Shipping_method$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Shipping_method$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Shipping_method model
   */ 
  interface Shipping_methodFieldRefs {
    readonly id: FieldRef<"Shipping_method", 'String'>
    readonly name: FieldRef<"Shipping_method", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Shipping_method findUnique
   */
  export type Shipping_methodFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_method to fetch.
     */
    where: Shipping_methodWhereUniqueInput
  }


  /**
   * Shipping_method findUniqueOrThrow
   */
  export type Shipping_methodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_method to fetch.
     */
    where: Shipping_methodWhereUniqueInput
  }


  /**
   * Shipping_method findFirst
   */
  export type Shipping_methodFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_method to fetch.
     */
    where?: Shipping_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_methods to fetch.
     */
    orderBy?: Shipping_methodOrderByWithRelationInput | Shipping_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipping_methods.
     */
    cursor?: Shipping_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipping_methods.
     */
    distinct?: Shipping_methodScalarFieldEnum | Shipping_methodScalarFieldEnum[]
  }


  /**
   * Shipping_method findFirstOrThrow
   */
  export type Shipping_methodFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_method to fetch.
     */
    where?: Shipping_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_methods to fetch.
     */
    orderBy?: Shipping_methodOrderByWithRelationInput | Shipping_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipping_methods.
     */
    cursor?: Shipping_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_methods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipping_methods.
     */
    distinct?: Shipping_methodScalarFieldEnum | Shipping_methodScalarFieldEnum[]
  }


  /**
   * Shipping_method findMany
   */
  export type Shipping_methodFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter, which Shipping_methods to fetch.
     */
    where?: Shipping_methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipping_methods to fetch.
     */
    orderBy?: Shipping_methodOrderByWithRelationInput | Shipping_methodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shipping_methods.
     */
    cursor?: Shipping_methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipping_methods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipping_methods.
     */
    skip?: number
    distinct?: Shipping_methodScalarFieldEnum | Shipping_methodScalarFieldEnum[]
  }


  /**
   * Shipping_method create
   */
  export type Shipping_methodCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * The data needed to create a Shipping_method.
     */
    data: XOR<Shipping_methodCreateInput, Shipping_methodUncheckedCreateInput>
  }


  /**
   * Shipping_method createMany
   */
  export type Shipping_methodCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shipping_methods.
     */
    data: Shipping_methodCreateManyInput | Shipping_methodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Shipping_method update
   */
  export type Shipping_methodUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * The data needed to update a Shipping_method.
     */
    data: XOR<Shipping_methodUpdateInput, Shipping_methodUncheckedUpdateInput>
    /**
     * Choose, which Shipping_method to update.
     */
    where: Shipping_methodWhereUniqueInput
  }


  /**
   * Shipping_method updateMany
   */
  export type Shipping_methodUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shipping_methods.
     */
    data: XOR<Shipping_methodUpdateManyMutationInput, Shipping_methodUncheckedUpdateManyInput>
    /**
     * Filter which Shipping_methods to update
     */
    where?: Shipping_methodWhereInput
  }


  /**
   * Shipping_method upsert
   */
  export type Shipping_methodUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * The filter to search for the Shipping_method to update in case it exists.
     */
    where: Shipping_methodWhereUniqueInput
    /**
     * In case the Shipping_method found by the `where` argument doesn't exist, create a new Shipping_method with this data.
     */
    create: XOR<Shipping_methodCreateInput, Shipping_methodUncheckedCreateInput>
    /**
     * In case the Shipping_method was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Shipping_methodUpdateInput, Shipping_methodUncheckedUpdateInput>
  }


  /**
   * Shipping_method delete
   */
  export type Shipping_methodDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
    /**
     * Filter which Shipping_method to delete.
     */
    where: Shipping_methodWhereUniqueInput
  }


  /**
   * Shipping_method deleteMany
   */
  export type Shipping_methodDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipping_methods to delete
     */
    where?: Shipping_methodWhereInput
  }


  /**
   * Shipping_method.Orders
   */
  export type Shipping_method$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Shipping_method without action
   */
  export type Shipping_methodDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipping_method
     */
    select?: Shipping_methodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Shipping_methodInclude<ExtArgs> | null
  }



  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    total_amount: Decimal | null
    order_number: number | null
  }

  export type OrderSumAggregateOutputType = {
    total_amount: Decimal | null
    order_number: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    order_date: Date | null
    payment_methodId: string | null
    userId: string | null
    shipping_addressId: string | null
    shipping_methodId: string | null
    total_amount: Decimal | null
    order_status: $Enums.OrderStatus | null
    order_number: number | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    order_date: Date | null
    payment_methodId: string | null
    userId: string | null
    shipping_addressId: string | null
    shipping_methodId: string | null
    total_amount: Decimal | null
    order_status: $Enums.OrderStatus | null
    order_number: number | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    order_date: number
    payment_methodId: number
    userId: number
    shipping_addressId: number
    shipping_methodId: number
    total_amount: number
    order_status: number
    order_number: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    total_amount?: true
    order_number?: true
  }

  export type OrderSumAggregateInputType = {
    total_amount?: true
    order_number?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    order_date?: true
    payment_methodId?: true
    userId?: true
    shipping_addressId?: true
    shipping_methodId?: true
    total_amount?: true
    order_status?: true
    order_number?: true
    createdAt?: true
    updateAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    order_date?: true
    payment_methodId?: true
    userId?: true
    shipping_addressId?: true
    shipping_methodId?: true
    total_amount?: true
    order_status?: true
    order_number?: true
    createdAt?: true
    updateAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    order_date?: true
    payment_methodId?: true
    userId?: true
    shipping_addressId?: true
    shipping_methodId?: true
    total_amount?: true
    order_status?: true
    order_number?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    order_date: Date
    payment_methodId: string
    userId: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal
    order_status: $Enums.OrderStatus
    order_number: number | null
    createdAt: Date
    updateAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_date?: boolean
    payment_methodId?: boolean
    userId?: boolean
    shipping_addressId?: boolean
    shipping_methodId?: boolean
    total_amount?: boolean
    order_status?: boolean
    order_number?: boolean
    createdAt?: boolean
    updateAt?: boolean
    payment_method?: boolean | Payment_methodDefaultArgs<ExtArgs>
    user?: boolean | Order$userArgs<ExtArgs>
    shipping_address?: boolean | Shipping_addressDefaultArgs<ExtArgs>
    shipping_method?: boolean | Shipping_methodDefaultArgs<ExtArgs>
    Order_items?: boolean | Order$Order_itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    order_date?: boolean
    payment_methodId?: boolean
    userId?: boolean
    shipping_addressId?: boolean
    shipping_methodId?: boolean
    total_amount?: boolean
    order_status?: boolean
    order_number?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    payment_method?: boolean | Payment_methodDefaultArgs<ExtArgs>
    user?: boolean | Order$userArgs<ExtArgs>
    shipping_address?: boolean | Shipping_addressDefaultArgs<ExtArgs>
    shipping_method?: boolean | Shipping_methodDefaultArgs<ExtArgs>
    Order_items?: boolean | Order$Order_itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      payment_method: Prisma.$Payment_methodPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      shipping_address: Prisma.$Shipping_addressPayload<ExtArgs>
      shipping_method: Prisma.$Shipping_methodPayload<ExtArgs>
      Order_items: Prisma.$Order_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      order_date: Date
      payment_methodId: string
      userId: string | null
      shipping_addressId: string
      shipping_methodId: string
      total_amount: Prisma.Decimal
      order_status: $Enums.OrderStatus
      order_number: number | null
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }


  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_method<T extends Payment_methodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Payment_methodDefaultArgs<ExtArgs>>): Prisma__Payment_methodClient<$Result.GetResult<Prisma.$Payment_methodPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends Order$userArgs<ExtArgs> = {}>(args?: Subset<T, Order$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    shipping_address<T extends Shipping_addressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Shipping_addressDefaultArgs<ExtArgs>>): Prisma__Shipping_addressClient<$Result.GetResult<Prisma.$Shipping_addressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    shipping_method<T extends Shipping_methodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Shipping_methodDefaultArgs<ExtArgs>>): Prisma__Shipping_methodClient<$Result.GetResult<Prisma.$Shipping_methodPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Order_items<T extends Order$Order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$Order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly order_date: FieldRef<"Order", 'DateTime'>
    readonly payment_methodId: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'String'>
    readonly shipping_addressId: FieldRef<"Order", 'String'>
    readonly shipping_methodId: FieldRef<"Order", 'String'>
    readonly total_amount: FieldRef<"Order", 'Decimal'>
    readonly order_status: FieldRef<"Order", 'OrderStatus'>
    readonly order_number: FieldRef<"Order", 'Int'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updateAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order.user
   */
  export type Order$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Order.Order_items
   */
  export type Order$Order_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    where?: Order_itemsWhereInput
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    cursor?: Order_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }


  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
  }



  /**
   * Model Order_items
   */

  export type AggregateOrder_items = {
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  export type Order_itemsAvgAggregateOutputType = {
    price: Decimal | null
    qty: number | null
  }

  export type Order_itemsSumAggregateOutputType = {
    price: Decimal | null
    qty: number | null
  }

  export type Order_itemsMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    price: Decimal | null
    qty: number | null
    productId: string | null
  }

  export type Order_itemsMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    price: Decimal | null
    qty: number | null
    productId: string | null
  }

  export type Order_itemsCountAggregateOutputType = {
    id: number
    orderId: number
    price: number
    qty: number
    productId: number
    _all: number
  }


  export type Order_itemsAvgAggregateInputType = {
    price?: true
    qty?: true
  }

  export type Order_itemsSumAggregateInputType = {
    price?: true
    qty?: true
  }

  export type Order_itemsMinAggregateInputType = {
    id?: true
    orderId?: true
    price?: true
    qty?: true
    productId?: true
  }

  export type Order_itemsMaxAggregateInputType = {
    id?: true
    orderId?: true
    price?: true
    qty?: true
    productId?: true
  }

  export type Order_itemsCountAggregateInputType = {
    id?: true
    orderId?: true
    price?: true
    qty?: true
    productId?: true
    _all?: true
  }

  export type Order_itemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order_items to aggregate.
     */
    where?: Order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Order_items
    **/
    _count?: true | Order_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_itemsMaxAggregateInputType
  }

  export type GetOrder_itemsAggregateType<T extends Order_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_items[P]>
      : GetScalarType<T[P], AggregateOrder_items[P]>
  }




  export type Order_itemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Order_itemsWhereInput
    orderBy?: Order_itemsOrderByWithAggregationInput | Order_itemsOrderByWithAggregationInput[]
    by: Order_itemsScalarFieldEnum[] | Order_itemsScalarFieldEnum
    having?: Order_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_itemsCountAggregateInputType | true
    _avg?: Order_itemsAvgAggregateInputType
    _sum?: Order_itemsSumAggregateInputType
    _min?: Order_itemsMinAggregateInputType
    _max?: Order_itemsMaxAggregateInputType
  }

  export type Order_itemsGroupByOutputType = {
    id: string
    orderId: string
    price: Decimal
    qty: number
    productId: string
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  type GetOrder_itemsGroupByPayload<T extends Order_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
        }
      >
    >


  export type Order_itemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    price?: boolean
    qty?: boolean
    productId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type Order_itemsSelectScalar = {
    id?: boolean
    orderId?: boolean
    price?: boolean
    qty?: boolean
    productId?: boolean
  }

  export type Order_itemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $Order_itemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Order_items"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      orderId: string
      price: Prisma.Decimal
      qty: number
      productId: string
    }, ExtArgs["result"]["order_items"]>
    composites: {}
  }


  type Order_itemsGetPayload<S extends boolean | null | undefined | Order_itemsDefaultArgs> = $Result.GetResult<Prisma.$Order_itemsPayload, S>

  type Order_itemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Order_itemsFindManyArgs, 'select' | 'include'> & {
      select?: Order_itemsCountAggregateInputType | true
    }

  export interface Order_itemsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order_items'], meta: { name: 'Order_items' } }
    /**
     * Find zero or one Order_items that matches the filter.
     * @param {Order_itemsFindUniqueArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Order_itemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsFindUniqueArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order_items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Order_itemsFindUniqueOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Order_itemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsFindFirstArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Order_itemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsFindFirstArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsFindFirstOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Order_itemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_items
     * const order_items = await prisma.order_items.findMany()
     * 
     * // Get first 10 Order_items
     * const order_items = await prisma.order_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Order_itemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order_items.
     * @param {Order_itemsCreateArgs} args - Arguments to create a Order_items.
     * @example
     * // Create one Order_items
     * const Order_items = await prisma.order_items.create({
     *   data: {
     *     // ... data to create a Order_items
     *   }
     * })
     * 
    **/
    create<T extends Order_itemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsCreateArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Order_items.
     *     @param {Order_itemsCreateManyArgs} args - Arguments to create many Order_items.
     *     @example
     *     // Create many Order_items
     *     const order_items = await prisma.order_items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Order_itemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order_items.
     * @param {Order_itemsDeleteArgs} args - Arguments to delete one Order_items.
     * @example
     * // Delete one Order_items
     * const Order_items = await prisma.order_items.delete({
     *   where: {
     *     // ... filter to delete one Order_items
     *   }
     * })
     * 
    **/
    delete<T extends Order_itemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsDeleteArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order_items.
     * @param {Order_itemsUpdateArgs} args - Arguments to update one Order_items.
     * @example
     * // Update one Order_items
     * const order_items = await prisma.order_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Order_itemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsUpdateArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Order_items.
     * @param {Order_itemsDeleteManyArgs} args - Arguments to filter Order_items to delete.
     * @example
     * // Delete a few Order_items
     * const { count } = await prisma.order_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Order_itemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Order_itemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_items
     * const order_items = await prisma.order_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Order_itemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_items.
     * @param {Order_itemsUpsertArgs} args - Arguments to update or create a Order_items.
     * @example
     * // Update or create a Order_items
     * const order_items = await prisma.order_items.upsert({
     *   create: {
     *     // ... data to create a Order_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_items we want to update
     *   }
     * })
    **/
    upsert<T extends Order_itemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Order_itemsUpsertArgs<ExtArgs>>
    ): Prisma__Order_itemsClient<$Result.GetResult<Prisma.$Order_itemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsCountArgs} args - Arguments to filter Order_items to count.
     * @example
     * // Count the number of Order_items
     * const count = await prisma.order_items.count({
     *   where: {
     *     // ... the filter for the Order_items we want to count
     *   }
     * })
    **/
    count<T extends Order_itemsCountArgs>(
      args?: Subset<T, Order_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_itemsAggregateArgs>(args: Subset<T, Order_itemsAggregateArgs>): Prisma.PrismaPromise<GetOrder_itemsAggregateType<T>>

    /**
     * Group by Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Order_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Order_itemsGroupByArgs['orderBy'] }
        : { orderBy?: Order_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Order_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order_items model
   */
  readonly fields: Order_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Order_itemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order_items model
   */ 
  interface Order_itemsFieldRefs {
    readonly id: FieldRef<"Order_items", 'String'>
    readonly orderId: FieldRef<"Order_items", 'String'>
    readonly price: FieldRef<"Order_items", 'Decimal'>
    readonly qty: FieldRef<"Order_items", 'Int'>
    readonly productId: FieldRef<"Order_items", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Order_items findUnique
   */
  export type Order_itemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where: Order_itemsWhereUniqueInput
  }


  /**
   * Order_items findUniqueOrThrow
   */
  export type Order_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where: Order_itemsWhereUniqueInput
  }


  /**
   * Order_items findFirst
   */
  export type Order_itemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where?: Order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Order_items.
     */
    cursor?: Order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }


  /**
   * Order_items findFirstOrThrow
   */
  export type Order_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where?: Order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Order_items.
     */
    cursor?: Order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }


  /**
   * Order_items findMany
   */
  export type Order_itemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where?: Order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemsOrderByWithRelationInput | Order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Order_items.
     */
    cursor?: Order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }


  /**
   * Order_items create
   */
  export type Order_itemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Order_items.
     */
    data: XOR<Order_itemsCreateInput, Order_itemsUncheckedCreateInput>
  }


  /**
   * Order_items createMany
   */
  export type Order_itemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Order_items.
     */
    data: Order_itemsCreateManyInput | Order_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Order_items update
   */
  export type Order_itemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Order_items.
     */
    data: XOR<Order_itemsUpdateInput, Order_itemsUncheckedUpdateInput>
    /**
     * Choose, which Order_items to update.
     */
    where: Order_itemsWhereUniqueInput
  }


  /**
   * Order_items updateMany
   */
  export type Order_itemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Order_items.
     */
    data: XOR<Order_itemsUpdateManyMutationInput, Order_itemsUncheckedUpdateManyInput>
    /**
     * Filter which Order_items to update
     */
    where?: Order_itemsWhereInput
  }


  /**
   * Order_items upsert
   */
  export type Order_itemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Order_items to update in case it exists.
     */
    where: Order_itemsWhereUniqueInput
    /**
     * In case the Order_items found by the `where` argument doesn't exist, create a new Order_items with this data.
     */
    create: XOR<Order_itemsCreateInput, Order_itemsUncheckedCreateInput>
    /**
     * In case the Order_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Order_itemsUpdateInput, Order_itemsUncheckedUpdateInput>
  }


  /**
   * Order_items delete
   */
  export type Order_itemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
    /**
     * Filter which Order_items to delete.
     */
    where: Order_itemsWhereUniqueInput
  }


  /**
   * Order_items deleteMany
   */
  export type Order_itemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order_items to delete
     */
    where?: Order_itemsWhereInput
  }


  /**
   * Order_items without action
   */
  export type Order_itemsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_items
     */
    select?: Order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Order_itemsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Contact_formScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    message: 'message'
  };

  export type Contact_formScalarFieldEnum = (typeof Contact_formScalarFieldEnum)[keyof typeof Contact_formScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email_address: 'email_address',
    mobile: 'mobile',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Cart_itemsScalarFieldEnum: {
    id: 'id',
    qty: 'qty',
    productId: 'productId',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    userId: 'userId'
  };

  export type Cart_itemsScalarFieldEnum = (typeof Cart_itemsScalarFieldEnum)[keyof typeof Cart_itemsScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    SKU: 'SKU',
    brand: 'brand',
    stock: 'stock',
    desc: 'desc',
    menu_order: 'menu_order',
    isFeatured: 'isFeatured'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Product_imageScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    productId: 'productId'
  };

  export type Product_imageScalarFieldEnum = (typeof Product_imageScalarFieldEnum)[keyof typeof Product_imageScalarFieldEnum]


  export const Product_categoryScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    productId: 'productId'
  };

  export type Product_categoryScalarFieldEnum = (typeof Product_categoryScalarFieldEnum)[keyof typeof Product_categoryScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const Shipping_addressScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    firstName: 'firstName',
    lastName: 'lastName',
    street_address: 'street_address',
    sub_district: 'sub_district',
    district: 'district',
    province: 'province',
    zip: 'zip',
    userId: 'userId'
  };

  export type Shipping_addressScalarFieldEnum = (typeof Shipping_addressScalarFieldEnum)[keyof typeof Shipping_addressScalarFieldEnum]


  export const Payment_methodScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Payment_methodScalarFieldEnum = (typeof Payment_methodScalarFieldEnum)[keyof typeof Payment_methodScalarFieldEnum]


  export const Shipping_methodScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Shipping_methodScalarFieldEnum = (typeof Shipping_methodScalarFieldEnum)[keyof typeof Shipping_methodScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    order_date: 'order_date',
    payment_methodId: 'payment_methodId',
    userId: 'userId',
    shipping_addressId: 'shipping_addressId',
    shipping_methodId: 'shipping_methodId',
    total_amount: 'total_amount',
    order_status: 'order_status',
    order_number: 'order_number',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const Order_itemsScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    price: 'price',
    qty: 'qty',
    productId: 'productId'
  };

  export type Order_itemsScalarFieldEnum = (typeof Order_itemsScalarFieldEnum)[keyof typeof Order_itemsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type Contact_formWhereInput = {
    AND?: Contact_formWhereInput | Contact_formWhereInput[]
    OR?: Contact_formWhereInput[]
    NOT?: Contact_formWhereInput | Contact_formWhereInput[]
    id?: IntFilter<"Contact_form"> | number
    name?: StringFilter<"Contact_form"> | string
    phone?: StringFilter<"Contact_form"> | string
    email?: StringFilter<"Contact_form"> | string
    message?: StringFilter<"Contact_form"> | string
  }

  export type Contact_formOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
  }

  export type Contact_formWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Contact_formWhereInput | Contact_formWhereInput[]
    OR?: Contact_formWhereInput[]
    NOT?: Contact_formWhereInput | Contact_formWhereInput[]
    name?: StringFilter<"Contact_form"> | string
    phone?: StringFilter<"Contact_form"> | string
    email?: StringFilter<"Contact_form"> | string
    message?: StringFilter<"Contact_form"> | string
  }, "id">

  export type Contact_formOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
    _count?: Contact_formCountOrderByAggregateInput
    _avg?: Contact_formAvgOrderByAggregateInput
    _max?: Contact_formMaxOrderByAggregateInput
    _min?: Contact_formMinOrderByAggregateInput
    _sum?: Contact_formSumOrderByAggregateInput
  }

  export type Contact_formScalarWhereWithAggregatesInput = {
    AND?: Contact_formScalarWhereWithAggregatesInput | Contact_formScalarWhereWithAggregatesInput[]
    OR?: Contact_formScalarWhereWithAggregatesInput[]
    NOT?: Contact_formScalarWhereWithAggregatesInput | Contact_formScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact_form"> | number
    name?: StringWithAggregatesFilter<"Contact_form"> | string
    phone?: StringWithAggregatesFilter<"Contact_form"> | string
    email?: StringWithAggregatesFilter<"Contact_form"> | string
    message?: StringWithAggregatesFilter<"Contact_form"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email_address?: StringNullableFilter<"User"> | string | null
    mobile?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    Shipping_address?: Shipping_addressListRelationFilter
    Orders?: OrderListRelationFilter
    Cart_items?: Cart_itemsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email_address?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    role?: SortOrder
    Shipping_address?: Shipping_addressOrderByRelationAggregateInput
    Orders?: OrderOrderByRelationAggregateInput
    Cart_items?: Cart_itemsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email_address?: string
    mobile?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    Shipping_address?: Shipping_addressListRelationFilter
    Orders?: OrderListRelationFilter
    Cart_items?: Cart_itemsListRelationFilter
  }, "id" | "email_address" | "mobile">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email_address?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email_address?: StringNullableWithAggregatesFilter<"User"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
  }

  export type Cart_itemsWhereInput = {
    AND?: Cart_itemsWhereInput | Cart_itemsWhereInput[]
    OR?: Cart_itemsWhereInput[]
    NOT?: Cart_itemsWhereInput | Cart_itemsWhereInput[]
    id?: StringFilter<"Cart_items"> | string
    qty?: IntFilter<"Cart_items"> | number
    productId?: StringFilter<"Cart_items"> | string
    createdAt?: DateTimeFilter<"Cart_items"> | Date | string
    updateAt?: DateTimeFilter<"Cart_items"> | Date | string
    userId?: StringNullableFilter<"Cart_items"> | string | null
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type Cart_itemsOrderByWithRelationInput = {
    id?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type Cart_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Cart_itemsWhereInput | Cart_itemsWhereInput[]
    OR?: Cart_itemsWhereInput[]
    NOT?: Cart_itemsWhereInput | Cart_itemsWhereInput[]
    qty?: IntFilter<"Cart_items"> | number
    productId?: StringFilter<"Cart_items"> | string
    createdAt?: DateTimeFilter<"Cart_items"> | Date | string
    updateAt?: DateTimeFilter<"Cart_items"> | Date | string
    userId?: StringNullableFilter<"Cart_items"> | string | null
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type Cart_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: Cart_itemsCountOrderByAggregateInput
    _avg?: Cart_itemsAvgOrderByAggregateInput
    _max?: Cart_itemsMaxOrderByAggregateInput
    _min?: Cart_itemsMinOrderByAggregateInput
    _sum?: Cart_itemsSumOrderByAggregateInput
  }

  export type Cart_itemsScalarWhereWithAggregatesInput = {
    AND?: Cart_itemsScalarWhereWithAggregatesInput | Cart_itemsScalarWhereWithAggregatesInput[]
    OR?: Cart_itemsScalarWhereWithAggregatesInput[]
    NOT?: Cart_itemsScalarWhereWithAggregatesInput | Cart_itemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cart_items"> | string
    qty?: IntWithAggregatesFilter<"Cart_items"> | number
    productId?: StringWithAggregatesFilter<"Cart_items"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Cart_items"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Cart_items"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Cart_items"> | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    price?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    SKU?: StringFilter<"Product"> | string
    brand?: StringNullableFilter<"Product"> | string | null
    stock?: IntNullableFilter<"Product"> | number | null
    desc?: StringNullableFilter<"Product"> | string | null
    menu_order?: IntNullableFilter<"Product"> | number | null
    isFeatured?: BoolNullableFilter<"Product"> | boolean | null
    Cart_items?: Cart_itemsListRelationFilter
    Product_category?: Product_categoryListRelationFilter
    Product_image?: Product_imageListRelationFilter
    Order_items?: Order_itemsListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    SKU?: SortOrder
    brand?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    menu_order?: SortOrderInput | SortOrder
    isFeatured?: SortOrderInput | SortOrder
    Cart_items?: Cart_itemsOrderByRelationAggregateInput
    Product_category?: Product_categoryOrderByRelationAggregateInput
    Product_image?: Product_imageOrderByRelationAggregateInput
    Order_items?: Order_itemsOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    SKU?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    price?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    brand?: StringNullableFilter<"Product"> | string | null
    stock?: IntNullableFilter<"Product"> | number | null
    desc?: StringNullableFilter<"Product"> | string | null
    menu_order?: IntNullableFilter<"Product"> | number | null
    isFeatured?: BoolNullableFilter<"Product"> | boolean | null
    Cart_items?: Cart_itemsListRelationFilter
    Product_category?: Product_categoryListRelationFilter
    Product_image?: Product_imageListRelationFilter
    Order_items?: Order_itemsListRelationFilter
  }, "id" | "SKU">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    SKU?: SortOrder
    brand?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    menu_order?: SortOrderInput | SortOrder
    isFeatured?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    price?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    SKU?: StringWithAggregatesFilter<"Product"> | string
    brand?: StringNullableWithAggregatesFilter<"Product"> | string | null
    stock?: IntNullableWithAggregatesFilter<"Product"> | number | null
    desc?: StringNullableWithAggregatesFilter<"Product"> | string | null
    menu_order?: IntNullableWithAggregatesFilter<"Product"> | number | null
    isFeatured?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
  }

  export type Product_imageWhereInput = {
    AND?: Product_imageWhereInput | Product_imageWhereInput[]
    OR?: Product_imageWhereInput[]
    NOT?: Product_imageWhereInput | Product_imageWhereInput[]
    id?: StringFilter<"Product_image"> | string
    image_url?: StringFilter<"Product_image"> | string
    productId?: StringFilter<"Product_image"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Product_imageOrderByWithRelationInput = {
    id?: SortOrder
    image_url?: SortOrder
    productId?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type Product_imageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Product_imageWhereInput | Product_imageWhereInput[]
    OR?: Product_imageWhereInput[]
    NOT?: Product_imageWhereInput | Product_imageWhereInput[]
    image_url?: StringFilter<"Product_image"> | string
    productId?: StringFilter<"Product_image"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type Product_imageOrderByWithAggregationInput = {
    id?: SortOrder
    image_url?: SortOrder
    productId?: SortOrder
    _count?: Product_imageCountOrderByAggregateInput
    _max?: Product_imageMaxOrderByAggregateInput
    _min?: Product_imageMinOrderByAggregateInput
  }

  export type Product_imageScalarWhereWithAggregatesInput = {
    AND?: Product_imageScalarWhereWithAggregatesInput | Product_imageScalarWhereWithAggregatesInput[]
    OR?: Product_imageScalarWhereWithAggregatesInput[]
    NOT?: Product_imageScalarWhereWithAggregatesInput | Product_imageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product_image"> | string
    image_url?: StringWithAggregatesFilter<"Product_image"> | string
    productId?: StringWithAggregatesFilter<"Product_image"> | string
  }

  export type Product_categoryWhereInput = {
    AND?: Product_categoryWhereInput | Product_categoryWhereInput[]
    OR?: Product_categoryWhereInput[]
    NOT?: Product_categoryWhereInput | Product_categoryWhereInput[]
    id?: StringFilter<"Product_category"> | string
    categoryId?: StringFilter<"Product_category"> | string
    productId?: StringFilter<"Product_category"> | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Product_categoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type Product_categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Product_categoryWhereInput | Product_categoryWhereInput[]
    OR?: Product_categoryWhereInput[]
    NOT?: Product_categoryWhereInput | Product_categoryWhereInput[]
    categoryId?: StringFilter<"Product_category"> | string
    productId?: StringFilter<"Product_category"> | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type Product_categoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
    _count?: Product_categoryCountOrderByAggregateInput
    _max?: Product_categoryMaxOrderByAggregateInput
    _min?: Product_categoryMinOrderByAggregateInput
  }

  export type Product_categoryScalarWhereWithAggregatesInput = {
    AND?: Product_categoryScalarWhereWithAggregatesInput | Product_categoryScalarWhereWithAggregatesInput[]
    OR?: Product_categoryScalarWhereWithAggregatesInput[]
    NOT?: Product_categoryScalarWhereWithAggregatesInput | Product_categoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product_category"> | string
    categoryId?: StringWithAggregatesFilter<"Product_category"> | string
    productId?: StringWithAggregatesFilter<"Product_category"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    Product_category?: Product_categoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Product_category?: Product_categoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    Product_category?: Product_categoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type Shipping_addressWhereInput = {
    AND?: Shipping_addressWhereInput | Shipping_addressWhereInput[]
    OR?: Shipping_addressWhereInput[]
    NOT?: Shipping_addressWhereInput | Shipping_addressWhereInput[]
    id?: StringFilter<"Shipping_address"> | string
    email?: StringFilter<"Shipping_address"> | string
    phone?: StringFilter<"Shipping_address"> | string
    firstName?: StringFilter<"Shipping_address"> | string
    lastName?: StringFilter<"Shipping_address"> | string
    street_address?: StringFilter<"Shipping_address"> | string
    sub_district?: StringFilter<"Shipping_address"> | string
    district?: StringFilter<"Shipping_address"> | string
    province?: StringFilter<"Shipping_address"> | string
    zip?: StringFilter<"Shipping_address"> | string
    userId?: StringNullableFilter<"Shipping_address"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Orders?: OrderListRelationFilter
  }

  export type Shipping_addressOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street_address?: SortOrder
    sub_district?: SortOrder
    district?: SortOrder
    province?: SortOrder
    zip?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    Orders?: OrderOrderByRelationAggregateInput
  }

  export type Shipping_addressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Shipping_addressWhereInput | Shipping_addressWhereInput[]
    OR?: Shipping_addressWhereInput[]
    NOT?: Shipping_addressWhereInput | Shipping_addressWhereInput[]
    email?: StringFilter<"Shipping_address"> | string
    phone?: StringFilter<"Shipping_address"> | string
    firstName?: StringFilter<"Shipping_address"> | string
    lastName?: StringFilter<"Shipping_address"> | string
    street_address?: StringFilter<"Shipping_address"> | string
    sub_district?: StringFilter<"Shipping_address"> | string
    district?: StringFilter<"Shipping_address"> | string
    province?: StringFilter<"Shipping_address"> | string
    zip?: StringFilter<"Shipping_address"> | string
    userId?: StringNullableFilter<"Shipping_address"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Orders?: OrderListRelationFilter
  }, "id">

  export type Shipping_addressOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street_address?: SortOrder
    sub_district?: SortOrder
    district?: SortOrder
    province?: SortOrder
    zip?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: Shipping_addressCountOrderByAggregateInput
    _max?: Shipping_addressMaxOrderByAggregateInput
    _min?: Shipping_addressMinOrderByAggregateInput
  }

  export type Shipping_addressScalarWhereWithAggregatesInput = {
    AND?: Shipping_addressScalarWhereWithAggregatesInput | Shipping_addressScalarWhereWithAggregatesInput[]
    OR?: Shipping_addressScalarWhereWithAggregatesInput[]
    NOT?: Shipping_addressScalarWhereWithAggregatesInput | Shipping_addressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shipping_address"> | string
    email?: StringWithAggregatesFilter<"Shipping_address"> | string
    phone?: StringWithAggregatesFilter<"Shipping_address"> | string
    firstName?: StringWithAggregatesFilter<"Shipping_address"> | string
    lastName?: StringWithAggregatesFilter<"Shipping_address"> | string
    street_address?: StringWithAggregatesFilter<"Shipping_address"> | string
    sub_district?: StringWithAggregatesFilter<"Shipping_address"> | string
    district?: StringWithAggregatesFilter<"Shipping_address"> | string
    province?: StringWithAggregatesFilter<"Shipping_address"> | string
    zip?: StringWithAggregatesFilter<"Shipping_address"> | string
    userId?: StringNullableWithAggregatesFilter<"Shipping_address"> | string | null
  }

  export type Payment_methodWhereInput = {
    AND?: Payment_methodWhereInput | Payment_methodWhereInput[]
    OR?: Payment_methodWhereInput[]
    NOT?: Payment_methodWhereInput | Payment_methodWhereInput[]
    id?: StringFilter<"Payment_method"> | string
    name?: StringFilter<"Payment_method"> | string
    Orders?: OrderListRelationFilter
  }

  export type Payment_methodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Orders?: OrderOrderByRelationAggregateInput
  }

  export type Payment_methodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Payment_methodWhereInput | Payment_methodWhereInput[]
    OR?: Payment_methodWhereInput[]
    NOT?: Payment_methodWhereInput | Payment_methodWhereInput[]
    name?: StringFilter<"Payment_method"> | string
    Orders?: OrderListRelationFilter
  }, "id">

  export type Payment_methodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: Payment_methodCountOrderByAggregateInput
    _max?: Payment_methodMaxOrderByAggregateInput
    _min?: Payment_methodMinOrderByAggregateInput
  }

  export type Payment_methodScalarWhereWithAggregatesInput = {
    AND?: Payment_methodScalarWhereWithAggregatesInput | Payment_methodScalarWhereWithAggregatesInput[]
    OR?: Payment_methodScalarWhereWithAggregatesInput[]
    NOT?: Payment_methodScalarWhereWithAggregatesInput | Payment_methodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment_method"> | string
    name?: StringWithAggregatesFilter<"Payment_method"> | string
  }

  export type Shipping_methodWhereInput = {
    AND?: Shipping_methodWhereInput | Shipping_methodWhereInput[]
    OR?: Shipping_methodWhereInput[]
    NOT?: Shipping_methodWhereInput | Shipping_methodWhereInput[]
    id?: StringFilter<"Shipping_method"> | string
    name?: StringFilter<"Shipping_method"> | string
    Orders?: OrderListRelationFilter
  }

  export type Shipping_methodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Orders?: OrderOrderByRelationAggregateInput
  }

  export type Shipping_methodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Shipping_methodWhereInput | Shipping_methodWhereInput[]
    OR?: Shipping_methodWhereInput[]
    NOT?: Shipping_methodWhereInput | Shipping_methodWhereInput[]
    name?: StringFilter<"Shipping_method"> | string
    Orders?: OrderListRelationFilter
  }, "id">

  export type Shipping_methodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: Shipping_methodCountOrderByAggregateInput
    _max?: Shipping_methodMaxOrderByAggregateInput
    _min?: Shipping_methodMinOrderByAggregateInput
  }

  export type Shipping_methodScalarWhereWithAggregatesInput = {
    AND?: Shipping_methodScalarWhereWithAggregatesInput | Shipping_methodScalarWhereWithAggregatesInput[]
    OR?: Shipping_methodScalarWhereWithAggregatesInput[]
    NOT?: Shipping_methodScalarWhereWithAggregatesInput | Shipping_methodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shipping_method"> | string
    name?: StringWithAggregatesFilter<"Shipping_method"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    order_date?: DateTimeFilter<"Order"> | Date | string
    payment_methodId?: StringFilter<"Order"> | string
    userId?: StringNullableFilter<"Order"> | string | null
    shipping_addressId?: StringFilter<"Order"> | string
    shipping_methodId?: StringFilter<"Order"> | string
    total_amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    order_number?: IntNullableFilter<"Order"> | number | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updateAt?: DateTimeFilter<"Order"> | Date | string
    payment_method?: XOR<Payment_methodRelationFilter, Payment_methodWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    shipping_address?: XOR<Shipping_addressRelationFilter, Shipping_addressWhereInput>
    shipping_method?: XOR<Shipping_methodRelationFilter, Shipping_methodWhereInput>
    Order_items?: Order_itemsListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    order_date?: SortOrder
    payment_methodId?: SortOrder
    userId?: SortOrderInput | SortOrder
    shipping_addressId?: SortOrder
    shipping_methodId?: SortOrder
    total_amount?: SortOrder
    order_status?: SortOrder
    order_number?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    payment_method?: Payment_methodOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    shipping_address?: Shipping_addressOrderByWithRelationInput
    shipping_method?: Shipping_methodOrderByWithRelationInput
    Order_items?: Order_itemsOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    order_number?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    order_date?: DateTimeFilter<"Order"> | Date | string
    payment_methodId?: StringFilter<"Order"> | string
    userId?: StringNullableFilter<"Order"> | string | null
    shipping_addressId?: StringFilter<"Order"> | string
    shipping_methodId?: StringFilter<"Order"> | string
    total_amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updateAt?: DateTimeFilter<"Order"> | Date | string
    payment_method?: XOR<Payment_methodRelationFilter, Payment_methodWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    shipping_address?: XOR<Shipping_addressRelationFilter, Shipping_addressWhereInput>
    shipping_method?: XOR<Shipping_methodRelationFilter, Shipping_methodWhereInput>
    Order_items?: Order_itemsListRelationFilter
  }, "id" | "order_number">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    order_date?: SortOrder
    payment_methodId?: SortOrder
    userId?: SortOrderInput | SortOrder
    shipping_addressId?: SortOrder
    shipping_methodId?: SortOrder
    total_amount?: SortOrder
    order_status?: SortOrder
    order_number?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    order_date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    payment_methodId?: StringWithAggregatesFilter<"Order"> | string
    userId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    shipping_addressId?: StringWithAggregatesFilter<"Order"> | string
    shipping_methodId?: StringWithAggregatesFilter<"Order"> | string
    total_amount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    order_number?: IntNullableWithAggregatesFilter<"Order"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type Order_itemsWhereInput = {
    AND?: Order_itemsWhereInput | Order_itemsWhereInput[]
    OR?: Order_itemsWhereInput[]
    NOT?: Order_itemsWhereInput | Order_itemsWhereInput[]
    id?: StringFilter<"Order_items"> | string
    orderId?: StringFilter<"Order_items"> | string
    price?: DecimalFilter<"Order_items"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"Order_items"> | number
    productId?: StringFilter<"Order_items"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Order_itemsOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    price?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type Order_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Order_itemsWhereInput | Order_itemsWhereInput[]
    OR?: Order_itemsWhereInput[]
    NOT?: Order_itemsWhereInput | Order_itemsWhereInput[]
    orderId?: StringFilter<"Order_items"> | string
    price?: DecimalFilter<"Order_items"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"Order_items"> | number
    productId?: StringFilter<"Order_items"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type Order_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    price?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    _count?: Order_itemsCountOrderByAggregateInput
    _avg?: Order_itemsAvgOrderByAggregateInput
    _max?: Order_itemsMaxOrderByAggregateInput
    _min?: Order_itemsMinOrderByAggregateInput
    _sum?: Order_itemsSumOrderByAggregateInput
  }

  export type Order_itemsScalarWhereWithAggregatesInput = {
    AND?: Order_itemsScalarWhereWithAggregatesInput | Order_itemsScalarWhereWithAggregatesInput[]
    OR?: Order_itemsScalarWhereWithAggregatesInput[]
    NOT?: Order_itemsScalarWhereWithAggregatesInput | Order_itemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order_items"> | string
    orderId?: StringWithAggregatesFilter<"Order_items"> | string
    price?: DecimalWithAggregatesFilter<"Order_items"> | Decimal | DecimalJsLike | number | string
    qty?: IntWithAggregatesFilter<"Order_items"> | number
    productId?: StringWithAggregatesFilter<"Order_items"> | string
  }

  export type Contact_formCreateInput = {
    name: string
    phone: string
    email: string
    message: string
  }

  export type Contact_formUncheckedCreateInput = {
    id?: number
    name: string
    phone: string
    email: string
    message: string
  }

  export type Contact_formUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type Contact_formUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type Contact_formCreateManyInput = {
    id?: number
    name: string
    phone: string
    email: string
    message: string
  }

  export type Contact_formUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type Contact_formUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressCreateNestedManyWithoutUserInput
    Orders?: OrderCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedCreateNestedManyWithoutUserInput
    Orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUpdateManyWithoutUserNestedInput
    Orders?: OrderUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedUpdateManyWithoutUserNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type Cart_itemsCreateInput = {
    id?: string
    qty: number
    createdAt?: Date | string
    updateAt?: Date | string
    product: ProductCreateNestedOneWithoutCart_itemsInput
    user?: UserCreateNestedOneWithoutCart_itemsInput
  }

  export type Cart_itemsUncheckedCreateInput = {
    id?: string
    qty: number
    productId: string
    createdAt?: Date | string
    updateAt?: Date | string
    userId?: string | null
  }

  export type Cart_itemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutCart_itemsNestedInput
    user?: UserUpdateOneWithoutCart_itemsNestedInput
  }

  export type Cart_itemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Cart_itemsCreateManyInput = {
    id?: string
    qty: number
    productId: string
    createdAt?: Date | string
    updateAt?: Date | string
    userId?: string | null
  }

  export type Cart_itemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Cart_itemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryCreateNestedManyWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryUncheckedCreateNestedManyWithoutProductInput
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUncheckedUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type Product_imageCreateInput = {
    id?: string
    image_url: string
    product: ProductCreateNestedOneWithoutProduct_imageInput
  }

  export type Product_imageUncheckedCreateInput = {
    id?: string
    image_url: string
    productId: string
  }

  export type Product_imageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutProduct_imageNestedInput
  }

  export type Product_imageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_imageCreateManyInput = {
    id?: string
    image_url: string
    productId: string
  }

  export type Product_imageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type Product_imageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_categoryCreateInput = {
    id?: string
    category: CategoryCreateNestedOneWithoutProduct_categoryInput
    product: ProductCreateNestedOneWithoutProduct_categoryInput
  }

  export type Product_categoryUncheckedCreateInput = {
    id?: string
    categoryId: string
    productId: string
  }

  export type Product_categoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutProduct_categoryNestedInput
    product?: ProductUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type Product_categoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_categoryCreateManyInput = {
    id?: string
    categoryId: string
    productId: string
  }

  export type Product_categoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type Product_categoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    Product_category?: Product_categoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    Product_category?: Product_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Product_category?: Product_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Product_category?: Product_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Shipping_addressCreateInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    user?: UserCreateNestedOneWithoutShipping_addressInput
    Orders?: OrderCreateNestedManyWithoutShipping_addressInput
  }

  export type Shipping_addressUncheckedCreateInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    userId?: string | null
    Orders?: OrderUncheckedCreateNestedManyWithoutShipping_addressInput
  }

  export type Shipping_addressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutShipping_addressNestedInput
    Orders?: OrderUpdateManyWithoutShipping_addressNestedInput
  }

  export type Shipping_addressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    Orders?: OrderUncheckedUpdateManyWithoutShipping_addressNestedInput
  }

  export type Shipping_addressCreateManyInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    userId?: string | null
  }

  export type Shipping_addressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
  }

  export type Shipping_addressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Payment_methodCreateInput = {
    id?: string
    name: string
    Orders?: OrderCreateNestedManyWithoutPayment_methodInput
  }

  export type Payment_methodUncheckedCreateInput = {
    id?: string
    name: string
    Orders?: OrderUncheckedCreateNestedManyWithoutPayment_methodInput
  }

  export type Payment_methodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUpdateManyWithoutPayment_methodNestedInput
  }

  export type Payment_methodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUncheckedUpdateManyWithoutPayment_methodNestedInput
  }

  export type Payment_methodCreateManyInput = {
    id?: string
    name: string
  }

  export type Payment_methodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Payment_methodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Shipping_methodCreateInput = {
    id?: string
    name: string
    Orders?: OrderCreateNestedManyWithoutShipping_methodInput
  }

  export type Shipping_methodUncheckedCreateInput = {
    id?: string
    name: string
    Orders?: OrderUncheckedCreateNestedManyWithoutShipping_methodInput
  }

  export type Shipping_methodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUpdateManyWithoutShipping_methodNestedInput
  }

  export type Shipping_methodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUncheckedUpdateManyWithoutShipping_methodNestedInput
  }

  export type Shipping_methodCreateManyInput = {
    id?: string
    name: string
  }

  export type Shipping_methodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Shipping_methodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    payment_method: Payment_methodCreateNestedOneWithoutOrdersInput
    user?: UserCreateNestedOneWithoutOrdersInput
    shipping_address: Shipping_addressCreateNestedOneWithoutOrdersInput
    shipping_method: Shipping_methodCreateNestedOneWithoutOrdersInput
    Order_items?: Order_itemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: Payment_methodUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneWithoutOrdersNestedInput
    shipping_address?: Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput
    shipping_method?: Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput
    Order_items?: Order_itemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order_items?: Order_itemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Order_itemsCreateInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    order: OrderCreateNestedOneWithoutOrder_itemsInput
    product: ProductCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_itemsUncheckedCreateInput = {
    id?: string
    orderId: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    productId: string
  }

  export type Order_itemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type Order_itemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Order_itemsCreateManyInput = {
    id?: string
    orderId: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    productId: string
  }

  export type Order_itemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type Order_itemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Contact_formCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
  }

  export type Contact_formAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Contact_formMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
  }

  export type Contact_formMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
  }

  export type Contact_formSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type Shipping_addressListRelationFilter = {
    every?: Shipping_addressWhereInput
    some?: Shipping_addressWhereInput
    none?: Shipping_addressWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type Cart_itemsListRelationFilter = {
    every?: Cart_itemsWhereInput
    some?: Cart_itemsWhereInput
    none?: Cart_itemsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Shipping_addressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Cart_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email_address?: SortOrder
    mobile?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email_address?: SortOrder
    mobile?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email_address?: SortOrder
    mobile?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    role?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type Cart_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    userId?: SortOrder
  }

  export type Cart_itemsAvgOrderByAggregateInput = {
    qty?: SortOrder
  }

  export type Cart_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    userId?: SortOrder
  }

  export type Cart_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    userId?: SortOrder
  }

  export type Cart_itemsSumOrderByAggregateInput = {
    qty?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type Product_categoryListRelationFilter = {
    every?: Product_categoryWhereInput
    some?: Product_categoryWhereInput
    none?: Product_categoryWhereInput
  }

  export type Product_imageListRelationFilter = {
    every?: Product_imageWhereInput
    some?: Product_imageWhereInput
    none?: Product_imageWhereInput
  }

  export type Order_itemsListRelationFilter = {
    every?: Order_itemsWhereInput
    some?: Order_itemsWhereInput
    none?: Order_itemsWhereInput
  }

  export type Product_categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Product_imageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Order_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    SKU?: SortOrder
    brand?: SortOrder
    stock?: SortOrder
    desc?: SortOrder
    menu_order?: SortOrder
    isFeatured?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
    menu_order?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    SKU?: SortOrder
    brand?: SortOrder
    stock?: SortOrder
    desc?: SortOrder
    menu_order?: SortOrder
    isFeatured?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    SKU?: SortOrder
    brand?: SortOrder
    stock?: SortOrder
    desc?: SortOrder
    menu_order?: SortOrder
    isFeatured?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
    menu_order?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type Product_imageCountOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    productId?: SortOrder
  }

  export type Product_imageMaxOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    productId?: SortOrder
  }

  export type Product_imageMinOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    productId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type Product_categoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
  }

  export type Product_categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
  }

  export type Product_categoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Shipping_addressCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street_address?: SortOrder
    sub_district?: SortOrder
    district?: SortOrder
    province?: SortOrder
    zip?: SortOrder
    userId?: SortOrder
  }

  export type Shipping_addressMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street_address?: SortOrder
    sub_district?: SortOrder
    district?: SortOrder
    province?: SortOrder
    zip?: SortOrder
    userId?: SortOrder
  }

  export type Shipping_addressMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street_address?: SortOrder
    sub_district?: SortOrder
    district?: SortOrder
    province?: SortOrder
    zip?: SortOrder
    userId?: SortOrder
  }

  export type Payment_methodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Payment_methodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Payment_methodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Shipping_methodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Shipping_methodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type Shipping_methodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type Payment_methodRelationFilter = {
    is?: Payment_methodWhereInput
    isNot?: Payment_methodWhereInput
  }

  export type Shipping_addressRelationFilter = {
    is?: Shipping_addressWhereInput
    isNot?: Shipping_addressWhereInput
  }

  export type Shipping_methodRelationFilter = {
    is?: Shipping_methodWhereInput
    isNot?: Shipping_methodWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    order_date?: SortOrder
    payment_methodId?: SortOrder
    userId?: SortOrder
    shipping_addressId?: SortOrder
    shipping_methodId?: SortOrder
    total_amount?: SortOrder
    order_status?: SortOrder
    order_number?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    total_amount?: SortOrder
    order_number?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    order_date?: SortOrder
    payment_methodId?: SortOrder
    userId?: SortOrder
    shipping_addressId?: SortOrder
    shipping_methodId?: SortOrder
    total_amount?: SortOrder
    order_status?: SortOrder
    order_number?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    order_date?: SortOrder
    payment_methodId?: SortOrder
    userId?: SortOrder
    shipping_addressId?: SortOrder
    shipping_methodId?: SortOrder
    total_amount?: SortOrder
    order_status?: SortOrder
    order_number?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    total_amount?: SortOrder
    order_number?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type Order_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    price?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
  }

  export type Order_itemsAvgOrderByAggregateInput = {
    price?: SortOrder
    qty?: SortOrder
  }

  export type Order_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    price?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
  }

  export type Order_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    price?: SortOrder
    qty?: SortOrder
    productId?: SortOrder
  }

  export type Order_itemsSumOrderByAggregateInput = {
    price?: SortOrder
    qty?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Shipping_addressCreateNestedManyWithoutUserInput = {
    create?: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput> | Shipping_addressCreateWithoutUserInput[] | Shipping_addressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutUserInput | Shipping_addressCreateOrConnectWithoutUserInput[]
    createMany?: Shipping_addressCreateManyUserInputEnvelope
    connect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type Cart_itemsCreateNestedManyWithoutUserInput = {
    create?: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput> | Cart_itemsCreateWithoutUserInput[] | Cart_itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutUserInput | Cart_itemsCreateOrConnectWithoutUserInput[]
    createMany?: Cart_itemsCreateManyUserInputEnvelope
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
  }

  export type Shipping_addressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput> | Shipping_addressCreateWithoutUserInput[] | Shipping_addressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutUserInput | Shipping_addressCreateOrConnectWithoutUserInput[]
    createMany?: Shipping_addressCreateManyUserInputEnvelope
    connect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type Cart_itemsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput> | Cart_itemsCreateWithoutUserInput[] | Cart_itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutUserInput | Cart_itemsCreateOrConnectWithoutUserInput[]
    createMany?: Cart_itemsCreateManyUserInputEnvelope
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type Shipping_addressUpdateManyWithoutUserNestedInput = {
    create?: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput> | Shipping_addressCreateWithoutUserInput[] | Shipping_addressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutUserInput | Shipping_addressCreateOrConnectWithoutUserInput[]
    upsert?: Shipping_addressUpsertWithWhereUniqueWithoutUserInput | Shipping_addressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Shipping_addressCreateManyUserInputEnvelope
    set?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    disconnect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    delete?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    connect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    update?: Shipping_addressUpdateWithWhereUniqueWithoutUserInput | Shipping_addressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Shipping_addressUpdateManyWithWhereWithoutUserInput | Shipping_addressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Shipping_addressScalarWhereInput | Shipping_addressScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type Cart_itemsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput> | Cart_itemsCreateWithoutUserInput[] | Cart_itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutUserInput | Cart_itemsCreateOrConnectWithoutUserInput[]
    upsert?: Cart_itemsUpsertWithWhereUniqueWithoutUserInput | Cart_itemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Cart_itemsCreateManyUserInputEnvelope
    set?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    disconnect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    delete?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    update?: Cart_itemsUpdateWithWhereUniqueWithoutUserInput | Cart_itemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Cart_itemsUpdateManyWithWhereWithoutUserInput | Cart_itemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
  }

  export type Shipping_addressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput> | Shipping_addressCreateWithoutUserInput[] | Shipping_addressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutUserInput | Shipping_addressCreateOrConnectWithoutUserInput[]
    upsert?: Shipping_addressUpsertWithWhereUniqueWithoutUserInput | Shipping_addressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Shipping_addressCreateManyUserInputEnvelope
    set?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    disconnect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    delete?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    connect?: Shipping_addressWhereUniqueInput | Shipping_addressWhereUniqueInput[]
    update?: Shipping_addressUpdateWithWhereUniqueWithoutUserInput | Shipping_addressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Shipping_addressUpdateManyWithWhereWithoutUserInput | Shipping_addressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Shipping_addressScalarWhereInput | Shipping_addressScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type Cart_itemsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput> | Cart_itemsCreateWithoutUserInput[] | Cart_itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutUserInput | Cart_itemsCreateOrConnectWithoutUserInput[]
    upsert?: Cart_itemsUpsertWithWhereUniqueWithoutUserInput | Cart_itemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Cart_itemsCreateManyUserInputEnvelope
    set?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    disconnect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    delete?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    update?: Cart_itemsUpdateWithWhereUniqueWithoutUserInput | Cart_itemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Cart_itemsUpdateManyWithWhereWithoutUserInput | Cart_itemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutCart_itemsInput = {
    create?: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCart_itemsInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCart_itemsInput = {
    create?: XOR<UserCreateWithoutCart_itemsInput, UserUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCart_itemsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutCart_itemsNestedInput = {
    create?: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCart_itemsInput
    upsert?: ProductUpsertWithoutCart_itemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutCart_itemsInput, ProductUpdateWithoutCart_itemsInput>, ProductUncheckedUpdateWithoutCart_itemsInput>
  }

  export type UserUpdateOneWithoutCart_itemsNestedInput = {
    create?: XOR<UserCreateWithoutCart_itemsInput, UserUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCart_itemsInput
    upsert?: UserUpsertWithoutCart_itemsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCart_itemsInput, UserUpdateWithoutCart_itemsInput>, UserUncheckedUpdateWithoutCart_itemsInput>
  }

  export type Cart_itemsCreateNestedManyWithoutProductInput = {
    create?: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput> | Cart_itemsCreateWithoutProductInput[] | Cart_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutProductInput | Cart_itemsCreateOrConnectWithoutProductInput[]
    createMany?: Cart_itemsCreateManyProductInputEnvelope
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
  }

  export type Product_categoryCreateNestedManyWithoutProductInput = {
    create?: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput> | Product_categoryCreateWithoutProductInput[] | Product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutProductInput | Product_categoryCreateOrConnectWithoutProductInput[]
    createMany?: Product_categoryCreateManyProductInputEnvelope
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
  }

  export type Product_imageCreateNestedManyWithoutProductInput = {
    create?: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput> | Product_imageCreateWithoutProductInput[] | Product_imageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_imageCreateOrConnectWithoutProductInput | Product_imageCreateOrConnectWithoutProductInput[]
    createMany?: Product_imageCreateManyProductInputEnvelope
    connect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
  }

  export type Order_itemsCreateNestedManyWithoutProductInput = {
    create?: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput> | Order_itemsCreateWithoutProductInput[] | Order_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutProductInput | Order_itemsCreateOrConnectWithoutProductInput[]
    createMany?: Order_itemsCreateManyProductInputEnvelope
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
  }

  export type Cart_itemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput> | Cart_itemsCreateWithoutProductInput[] | Cart_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutProductInput | Cart_itemsCreateOrConnectWithoutProductInput[]
    createMany?: Cart_itemsCreateManyProductInputEnvelope
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
  }

  export type Product_categoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput> | Product_categoryCreateWithoutProductInput[] | Product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutProductInput | Product_categoryCreateOrConnectWithoutProductInput[]
    createMany?: Product_categoryCreateManyProductInputEnvelope
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
  }

  export type Product_imageUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput> | Product_imageCreateWithoutProductInput[] | Product_imageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_imageCreateOrConnectWithoutProductInput | Product_imageCreateOrConnectWithoutProductInput[]
    createMany?: Product_imageCreateManyProductInputEnvelope
    connect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
  }

  export type Order_itemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput> | Order_itemsCreateWithoutProductInput[] | Order_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutProductInput | Order_itemsCreateOrConnectWithoutProductInput[]
    createMany?: Order_itemsCreateManyProductInputEnvelope
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type Cart_itemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput> | Cart_itemsCreateWithoutProductInput[] | Cart_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutProductInput | Cart_itemsCreateOrConnectWithoutProductInput[]
    upsert?: Cart_itemsUpsertWithWhereUniqueWithoutProductInput | Cart_itemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Cart_itemsCreateManyProductInputEnvelope
    set?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    disconnect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    delete?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    update?: Cart_itemsUpdateWithWhereUniqueWithoutProductInput | Cart_itemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Cart_itemsUpdateManyWithWhereWithoutProductInput | Cart_itemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
  }

  export type Product_categoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput> | Product_categoryCreateWithoutProductInput[] | Product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutProductInput | Product_categoryCreateOrConnectWithoutProductInput[]
    upsert?: Product_categoryUpsertWithWhereUniqueWithoutProductInput | Product_categoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Product_categoryCreateManyProductInputEnvelope
    set?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    disconnect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    delete?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    update?: Product_categoryUpdateWithWhereUniqueWithoutProductInput | Product_categoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Product_categoryUpdateManyWithWhereWithoutProductInput | Product_categoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
  }

  export type Product_imageUpdateManyWithoutProductNestedInput = {
    create?: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput> | Product_imageCreateWithoutProductInput[] | Product_imageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_imageCreateOrConnectWithoutProductInput | Product_imageCreateOrConnectWithoutProductInput[]
    upsert?: Product_imageUpsertWithWhereUniqueWithoutProductInput | Product_imageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Product_imageCreateManyProductInputEnvelope
    set?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    disconnect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    delete?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    connect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    update?: Product_imageUpdateWithWhereUniqueWithoutProductInput | Product_imageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Product_imageUpdateManyWithWhereWithoutProductInput | Product_imageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Product_imageScalarWhereInput | Product_imageScalarWhereInput[]
  }

  export type Order_itemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput> | Order_itemsCreateWithoutProductInput[] | Order_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutProductInput | Order_itemsCreateOrConnectWithoutProductInput[]
    upsert?: Order_itemsUpsertWithWhereUniqueWithoutProductInput | Order_itemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Order_itemsCreateManyProductInputEnvelope
    set?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    disconnect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    delete?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    update?: Order_itemsUpdateWithWhereUniqueWithoutProductInput | Order_itemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Order_itemsUpdateManyWithWhereWithoutProductInput | Order_itemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
  }

  export type Cart_itemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput> | Cart_itemsCreateWithoutProductInput[] | Cart_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Cart_itemsCreateOrConnectWithoutProductInput | Cart_itemsCreateOrConnectWithoutProductInput[]
    upsert?: Cart_itemsUpsertWithWhereUniqueWithoutProductInput | Cart_itemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Cart_itemsCreateManyProductInputEnvelope
    set?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    disconnect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    delete?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    connect?: Cart_itemsWhereUniqueInput | Cart_itemsWhereUniqueInput[]
    update?: Cart_itemsUpdateWithWhereUniqueWithoutProductInput | Cart_itemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Cart_itemsUpdateManyWithWhereWithoutProductInput | Cart_itemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
  }

  export type Product_categoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput> | Product_categoryCreateWithoutProductInput[] | Product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutProductInput | Product_categoryCreateOrConnectWithoutProductInput[]
    upsert?: Product_categoryUpsertWithWhereUniqueWithoutProductInput | Product_categoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Product_categoryCreateManyProductInputEnvelope
    set?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    disconnect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    delete?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    update?: Product_categoryUpdateWithWhereUniqueWithoutProductInput | Product_categoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Product_categoryUpdateManyWithWhereWithoutProductInput | Product_categoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
  }

  export type Product_imageUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput> | Product_imageCreateWithoutProductInput[] | Product_imageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Product_imageCreateOrConnectWithoutProductInput | Product_imageCreateOrConnectWithoutProductInput[]
    upsert?: Product_imageUpsertWithWhereUniqueWithoutProductInput | Product_imageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Product_imageCreateManyProductInputEnvelope
    set?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    disconnect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    delete?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    connect?: Product_imageWhereUniqueInput | Product_imageWhereUniqueInput[]
    update?: Product_imageUpdateWithWhereUniqueWithoutProductInput | Product_imageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Product_imageUpdateManyWithWhereWithoutProductInput | Product_imageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Product_imageScalarWhereInput | Product_imageScalarWhereInput[]
  }

  export type Order_itemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput> | Order_itemsCreateWithoutProductInput[] | Order_itemsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutProductInput | Order_itemsCreateOrConnectWithoutProductInput[]
    upsert?: Order_itemsUpsertWithWhereUniqueWithoutProductInput | Order_itemsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Order_itemsCreateManyProductInputEnvelope
    set?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    disconnect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    delete?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    update?: Order_itemsUpdateWithWhereUniqueWithoutProductInput | Order_itemsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Order_itemsUpdateManyWithWhereWithoutProductInput | Order_itemsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutProduct_imageInput = {
    create?: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imageInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProduct_imageNestedInput = {
    create?: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imageInput
    upsert?: ProductUpsertWithoutProduct_imageInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProduct_imageInput, ProductUpdateWithoutProduct_imageInput>, ProductUncheckedUpdateWithoutProduct_imageInput>
  }

  export type CategoryCreateNestedOneWithoutProduct_categoryInput = {
    create?: XOR<CategoryCreateWithoutProduct_categoryInput, CategoryUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProduct_categoryInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProduct_categoryInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput
    connect?: ProductWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutProduct_categoryNestedInput = {
    create?: XOR<CategoryCreateWithoutProduct_categoryInput, CategoryUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProduct_categoryInput
    upsert?: CategoryUpsertWithoutProduct_categoryInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProduct_categoryInput, CategoryUpdateWithoutProduct_categoryInput>, CategoryUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type ProductUpdateOneRequiredWithoutProduct_categoryNestedInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput
    upsert?: ProductUpsertWithoutProduct_categoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProduct_categoryInput, ProductUpdateWithoutProduct_categoryInput>, ProductUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type Product_categoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput> | Product_categoryCreateWithoutCategoryInput[] | Product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutCategoryInput | Product_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: Product_categoryCreateManyCategoryInputEnvelope
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
  }

  export type Product_categoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput> | Product_categoryCreateWithoutCategoryInput[] | Product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutCategoryInput | Product_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: Product_categoryCreateManyCategoryInputEnvelope
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
  }

  export type Product_categoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput> | Product_categoryCreateWithoutCategoryInput[] | Product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutCategoryInput | Product_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: Product_categoryUpsertWithWhereUniqueWithoutCategoryInput | Product_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: Product_categoryCreateManyCategoryInputEnvelope
    set?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    disconnect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    delete?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    update?: Product_categoryUpdateWithWhereUniqueWithoutCategoryInput | Product_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: Product_categoryUpdateManyWithWhereWithoutCategoryInput | Product_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
  }

  export type Product_categoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput> | Product_categoryCreateWithoutCategoryInput[] | Product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: Product_categoryCreateOrConnectWithoutCategoryInput | Product_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: Product_categoryUpsertWithWhereUniqueWithoutCategoryInput | Product_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: Product_categoryCreateManyCategoryInputEnvelope
    set?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    disconnect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    delete?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    connect?: Product_categoryWhereUniqueInput | Product_categoryWhereUniqueInput[]
    update?: Product_categoryUpdateWithWhereUniqueWithoutCategoryInput | Product_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: Product_categoryUpdateManyWithWhereWithoutCategoryInput | Product_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShipping_addressInput = {
    create?: XOR<UserCreateWithoutShipping_addressInput, UserUncheckedCreateWithoutShipping_addressInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipping_addressInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutShipping_addressInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput> | OrderCreateWithoutShipping_addressInput[] | OrderUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput | OrderCreateOrConnectWithoutShipping_addressInput[]
    createMany?: OrderCreateManyShipping_addressInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutShipping_addressInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput> | OrderCreateWithoutShipping_addressInput[] | OrderUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput | OrderCreateOrConnectWithoutShipping_addressInput[]
    createMany?: OrderCreateManyShipping_addressInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutShipping_addressNestedInput = {
    create?: XOR<UserCreateWithoutShipping_addressInput, UserUncheckedCreateWithoutShipping_addressInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipping_addressInput
    upsert?: UserUpsertWithoutShipping_addressInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShipping_addressInput, UserUpdateWithoutShipping_addressInput>, UserUncheckedUpdateWithoutShipping_addressInput>
  }

  export type OrderUpdateManyWithoutShipping_addressNestedInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput> | OrderCreateWithoutShipping_addressInput[] | OrderUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput | OrderCreateOrConnectWithoutShipping_addressInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutShipping_addressInput | OrderUpsertWithWhereUniqueWithoutShipping_addressInput[]
    createMany?: OrderCreateManyShipping_addressInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutShipping_addressInput | OrderUpdateWithWhereUniqueWithoutShipping_addressInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutShipping_addressInput | OrderUpdateManyWithWhereWithoutShipping_addressInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutShipping_addressNestedInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput> | OrderCreateWithoutShipping_addressInput[] | OrderUncheckedCreateWithoutShipping_addressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput | OrderCreateOrConnectWithoutShipping_addressInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutShipping_addressInput | OrderUpsertWithWhereUniqueWithoutShipping_addressInput[]
    createMany?: OrderCreateManyShipping_addressInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutShipping_addressInput | OrderUpdateWithWhereUniqueWithoutShipping_addressInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutShipping_addressInput | OrderUpdateManyWithWhereWithoutShipping_addressInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutPayment_methodInput = {
    create?: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput> | OrderCreateWithoutPayment_methodInput[] | OrderUncheckedCreateWithoutPayment_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_methodInput | OrderCreateOrConnectWithoutPayment_methodInput[]
    createMany?: OrderCreateManyPayment_methodInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutPayment_methodInput = {
    create?: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput> | OrderCreateWithoutPayment_methodInput[] | OrderUncheckedCreateWithoutPayment_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_methodInput | OrderCreateOrConnectWithoutPayment_methodInput[]
    createMany?: OrderCreateManyPayment_methodInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutPayment_methodNestedInput = {
    create?: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput> | OrderCreateWithoutPayment_methodInput[] | OrderUncheckedCreateWithoutPayment_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_methodInput | OrderCreateOrConnectWithoutPayment_methodInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutPayment_methodInput | OrderUpsertWithWhereUniqueWithoutPayment_methodInput[]
    createMany?: OrderCreateManyPayment_methodInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutPayment_methodInput | OrderUpdateWithWhereUniqueWithoutPayment_methodInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutPayment_methodInput | OrderUpdateManyWithWhereWithoutPayment_methodInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutPayment_methodNestedInput = {
    create?: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput> | OrderCreateWithoutPayment_methodInput[] | OrderUncheckedCreateWithoutPayment_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_methodInput | OrderCreateOrConnectWithoutPayment_methodInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutPayment_methodInput | OrderUpsertWithWhereUniqueWithoutPayment_methodInput[]
    createMany?: OrderCreateManyPayment_methodInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutPayment_methodInput | OrderUpdateWithWhereUniqueWithoutPayment_methodInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutPayment_methodInput | OrderUpdateManyWithWhereWithoutPayment_methodInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutShipping_methodInput = {
    create?: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput> | OrderCreateWithoutShipping_methodInput[] | OrderUncheckedCreateWithoutShipping_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_methodInput | OrderCreateOrConnectWithoutShipping_methodInput[]
    createMany?: OrderCreateManyShipping_methodInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutShipping_methodInput = {
    create?: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput> | OrderCreateWithoutShipping_methodInput[] | OrderUncheckedCreateWithoutShipping_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_methodInput | OrderCreateOrConnectWithoutShipping_methodInput[]
    createMany?: OrderCreateManyShipping_methodInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutShipping_methodNestedInput = {
    create?: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput> | OrderCreateWithoutShipping_methodInput[] | OrderUncheckedCreateWithoutShipping_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_methodInput | OrderCreateOrConnectWithoutShipping_methodInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutShipping_methodInput | OrderUpsertWithWhereUniqueWithoutShipping_methodInput[]
    createMany?: OrderCreateManyShipping_methodInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutShipping_methodInput | OrderUpdateWithWhereUniqueWithoutShipping_methodInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutShipping_methodInput | OrderUpdateManyWithWhereWithoutShipping_methodInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutShipping_methodNestedInput = {
    create?: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput> | OrderCreateWithoutShipping_methodInput[] | OrderUncheckedCreateWithoutShipping_methodInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_methodInput | OrderCreateOrConnectWithoutShipping_methodInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutShipping_methodInput | OrderUpsertWithWhereUniqueWithoutShipping_methodInput[]
    createMany?: OrderCreateManyShipping_methodInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutShipping_methodInput | OrderUpdateWithWhereUniqueWithoutShipping_methodInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutShipping_methodInput | OrderUpdateManyWithWhereWithoutShipping_methodInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type Payment_methodCreateNestedOneWithoutOrdersInput = {
    create?: XOR<Payment_methodCreateWithoutOrdersInput, Payment_methodUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Payment_methodCreateOrConnectWithoutOrdersInput
    connect?: Payment_methodWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type Shipping_addressCreateNestedOneWithoutOrdersInput = {
    create?: XOR<Shipping_addressCreateWithoutOrdersInput, Shipping_addressUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutOrdersInput
    connect?: Shipping_addressWhereUniqueInput
  }

  export type Shipping_methodCreateNestedOneWithoutOrdersInput = {
    create?: XOR<Shipping_methodCreateWithoutOrdersInput, Shipping_methodUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Shipping_methodCreateOrConnectWithoutOrdersInput
    connect?: Shipping_methodWhereUniqueInput
  }

  export type Order_itemsCreateNestedManyWithoutOrderInput = {
    create?: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput> | Order_itemsCreateWithoutOrderInput[] | Order_itemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutOrderInput | Order_itemsCreateOrConnectWithoutOrderInput[]
    createMany?: Order_itemsCreateManyOrderInputEnvelope
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
  }

  export type Order_itemsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput> | Order_itemsCreateWithoutOrderInput[] | Order_itemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutOrderInput | Order_itemsCreateOrConnectWithoutOrderInput[]
    createMany?: Order_itemsCreateManyOrderInputEnvelope
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type Payment_methodUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<Payment_methodCreateWithoutOrdersInput, Payment_methodUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Payment_methodCreateOrConnectWithoutOrdersInput
    upsert?: Payment_methodUpsertWithoutOrdersInput
    connect?: Payment_methodWhereUniqueInput
    update?: XOR<XOR<Payment_methodUpdateToOneWithWhereWithoutOrdersInput, Payment_methodUpdateWithoutOrdersInput>, Payment_methodUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<Shipping_addressCreateWithoutOrdersInput, Shipping_addressUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Shipping_addressCreateOrConnectWithoutOrdersInput
    upsert?: Shipping_addressUpsertWithoutOrdersInput
    connect?: Shipping_addressWhereUniqueInput
    update?: XOR<XOR<Shipping_addressUpdateToOneWithWhereWithoutOrdersInput, Shipping_addressUpdateWithoutOrdersInput>, Shipping_addressUncheckedUpdateWithoutOrdersInput>
  }

  export type Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<Shipping_methodCreateWithoutOrdersInput, Shipping_methodUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: Shipping_methodCreateOrConnectWithoutOrdersInput
    upsert?: Shipping_methodUpsertWithoutOrdersInput
    connect?: Shipping_methodWhereUniqueInput
    update?: XOR<XOR<Shipping_methodUpdateToOneWithWhereWithoutOrdersInput, Shipping_methodUpdateWithoutOrdersInput>, Shipping_methodUncheckedUpdateWithoutOrdersInput>
  }

  export type Order_itemsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput> | Order_itemsCreateWithoutOrderInput[] | Order_itemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutOrderInput | Order_itemsCreateOrConnectWithoutOrderInput[]
    upsert?: Order_itemsUpsertWithWhereUniqueWithoutOrderInput | Order_itemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: Order_itemsCreateManyOrderInputEnvelope
    set?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    disconnect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    delete?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    update?: Order_itemsUpdateWithWhereUniqueWithoutOrderInput | Order_itemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: Order_itemsUpdateManyWithWhereWithoutOrderInput | Order_itemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
  }

  export type Order_itemsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput> | Order_itemsCreateWithoutOrderInput[] | Order_itemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Order_itemsCreateOrConnectWithoutOrderInput | Order_itemsCreateOrConnectWithoutOrderInput[]
    upsert?: Order_itemsUpsertWithWhereUniqueWithoutOrderInput | Order_itemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: Order_itemsCreateManyOrderInputEnvelope
    set?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    disconnect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    delete?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    connect?: Order_itemsWhereUniqueInput | Order_itemsWhereUniqueInput[]
    update?: Order_itemsUpdateWithWhereUniqueWithoutOrderInput | Order_itemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: Order_itemsUpdateManyWithWhereWithoutOrderInput | Order_itemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrder_itemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    upsert?: OrderUpsertWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrder_itemsInput, OrderUpdateWithoutOrder_itemsInput>, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrder_itemsInput
    upsert?: ProductUpsertWithoutOrder_itemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrder_itemsInput, ProductUpdateWithoutOrder_itemsInput>, ProductUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type Shipping_addressCreateWithoutUserInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    Orders?: OrderCreateNestedManyWithoutShipping_addressInput
  }

  export type Shipping_addressUncheckedCreateWithoutUserInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    Orders?: OrderUncheckedCreateNestedManyWithoutShipping_addressInput
  }

  export type Shipping_addressCreateOrConnectWithoutUserInput = {
    where: Shipping_addressWhereUniqueInput
    create: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput>
  }

  export type Shipping_addressCreateManyUserInputEnvelope = {
    data: Shipping_addressCreateManyUserInput | Shipping_addressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    payment_method: Payment_methodCreateNestedOneWithoutOrdersInput
    shipping_address: Shipping_addressCreateNestedOneWithoutOrdersInput
    shipping_method: Shipping_methodCreateNestedOneWithoutOrdersInput
    Order_items?: Order_itemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Cart_itemsCreateWithoutUserInput = {
    id?: string
    qty: number
    createdAt?: Date | string
    updateAt?: Date | string
    product: ProductCreateNestedOneWithoutCart_itemsInput
  }

  export type Cart_itemsUncheckedCreateWithoutUserInput = {
    id?: string
    qty: number
    productId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type Cart_itemsCreateOrConnectWithoutUserInput = {
    where: Cart_itemsWhereUniqueInput
    create: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput>
  }

  export type Cart_itemsCreateManyUserInputEnvelope = {
    data: Cart_itemsCreateManyUserInput | Cart_itemsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Shipping_addressUpsertWithWhereUniqueWithoutUserInput = {
    where: Shipping_addressWhereUniqueInput
    update: XOR<Shipping_addressUpdateWithoutUserInput, Shipping_addressUncheckedUpdateWithoutUserInput>
    create: XOR<Shipping_addressCreateWithoutUserInput, Shipping_addressUncheckedCreateWithoutUserInput>
  }

  export type Shipping_addressUpdateWithWhereUniqueWithoutUserInput = {
    where: Shipping_addressWhereUniqueInput
    data: XOR<Shipping_addressUpdateWithoutUserInput, Shipping_addressUncheckedUpdateWithoutUserInput>
  }

  export type Shipping_addressUpdateManyWithWhereWithoutUserInput = {
    where: Shipping_addressScalarWhereInput
    data: XOR<Shipping_addressUpdateManyMutationInput, Shipping_addressUncheckedUpdateManyWithoutUserInput>
  }

  export type Shipping_addressScalarWhereInput = {
    AND?: Shipping_addressScalarWhereInput | Shipping_addressScalarWhereInput[]
    OR?: Shipping_addressScalarWhereInput[]
    NOT?: Shipping_addressScalarWhereInput | Shipping_addressScalarWhereInput[]
    id?: StringFilter<"Shipping_address"> | string
    email?: StringFilter<"Shipping_address"> | string
    phone?: StringFilter<"Shipping_address"> | string
    firstName?: StringFilter<"Shipping_address"> | string
    lastName?: StringFilter<"Shipping_address"> | string
    street_address?: StringFilter<"Shipping_address"> | string
    sub_district?: StringFilter<"Shipping_address"> | string
    district?: StringFilter<"Shipping_address"> | string
    province?: StringFilter<"Shipping_address"> | string
    zip?: StringFilter<"Shipping_address"> | string
    userId?: StringNullableFilter<"Shipping_address"> | string | null
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    order_date?: DateTimeFilter<"Order"> | Date | string
    payment_methodId?: StringFilter<"Order"> | string
    userId?: StringNullableFilter<"Order"> | string | null
    shipping_addressId?: StringFilter<"Order"> | string
    shipping_methodId?: StringFilter<"Order"> | string
    total_amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    order_number?: IntNullableFilter<"Order"> | number | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updateAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type Cart_itemsUpsertWithWhereUniqueWithoutUserInput = {
    where: Cart_itemsWhereUniqueInput
    update: XOR<Cart_itemsUpdateWithoutUserInput, Cart_itemsUncheckedUpdateWithoutUserInput>
    create: XOR<Cart_itemsCreateWithoutUserInput, Cart_itemsUncheckedCreateWithoutUserInput>
  }

  export type Cart_itemsUpdateWithWhereUniqueWithoutUserInput = {
    where: Cart_itemsWhereUniqueInput
    data: XOR<Cart_itemsUpdateWithoutUserInput, Cart_itemsUncheckedUpdateWithoutUserInput>
  }

  export type Cart_itemsUpdateManyWithWhereWithoutUserInput = {
    where: Cart_itemsScalarWhereInput
    data: XOR<Cart_itemsUpdateManyMutationInput, Cart_itemsUncheckedUpdateManyWithoutUserInput>
  }

  export type Cart_itemsScalarWhereInput = {
    AND?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
    OR?: Cart_itemsScalarWhereInput[]
    NOT?: Cart_itemsScalarWhereInput | Cart_itemsScalarWhereInput[]
    id?: StringFilter<"Cart_items"> | string
    qty?: IntFilter<"Cart_items"> | number
    productId?: StringFilter<"Cart_items"> | string
    createdAt?: DateTimeFilter<"Cart_items"> | Date | string
    updateAt?: DateTimeFilter<"Cart_items"> | Date | string
    userId?: StringNullableFilter<"Cart_items"> | string | null
  }

  export type ProductCreateWithoutCart_itemsInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Product_category?: Product_categoryCreateNestedManyWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCart_itemsInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Product_category?: Product_categoryUncheckedCreateNestedManyWithoutProductInput
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCart_itemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
  }

  export type UserCreateWithoutCart_itemsInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressCreateNestedManyWithoutUserInput
    Orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCart_itemsInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedCreateNestedManyWithoutUserInput
    Orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCart_itemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCart_itemsInput, UserUncheckedCreateWithoutCart_itemsInput>
  }

  export type ProductUpsertWithoutCart_itemsInput = {
    update: XOR<ProductUpdateWithoutCart_itemsInput, ProductUncheckedUpdateWithoutCart_itemsInput>
    create: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutCart_itemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutCart_itemsInput, ProductUncheckedUpdateWithoutCart_itemsInput>
  }

  export type ProductUpdateWithoutCart_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Product_category?: Product_categoryUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCart_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Product_category?: Product_categoryUncheckedUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserUpsertWithoutCart_itemsInput = {
    update: XOR<UserUpdateWithoutCart_itemsInput, UserUncheckedUpdateWithoutCart_itemsInput>
    create: XOR<UserCreateWithoutCart_itemsInput, UserUncheckedCreateWithoutCart_itemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCart_itemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCart_itemsInput, UserUncheckedUpdateWithoutCart_itemsInput>
  }

  export type UserUpdateWithoutCart_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUpdateManyWithoutUserNestedInput
    Orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCart_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedUpdateManyWithoutUserNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type Cart_itemsCreateWithoutProductInput = {
    id?: string
    qty: number
    createdAt?: Date | string
    updateAt?: Date | string
    user?: UserCreateNestedOneWithoutCart_itemsInput
  }

  export type Cart_itemsUncheckedCreateWithoutProductInput = {
    id?: string
    qty: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId?: string | null
  }

  export type Cart_itemsCreateOrConnectWithoutProductInput = {
    where: Cart_itemsWhereUniqueInput
    create: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput>
  }

  export type Cart_itemsCreateManyProductInputEnvelope = {
    data: Cart_itemsCreateManyProductInput | Cart_itemsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type Product_categoryCreateWithoutProductInput = {
    id?: string
    category: CategoryCreateNestedOneWithoutProduct_categoryInput
  }

  export type Product_categoryUncheckedCreateWithoutProductInput = {
    id?: string
    categoryId: string
  }

  export type Product_categoryCreateOrConnectWithoutProductInput = {
    where: Product_categoryWhereUniqueInput
    create: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput>
  }

  export type Product_categoryCreateManyProductInputEnvelope = {
    data: Product_categoryCreateManyProductInput | Product_categoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type Product_imageCreateWithoutProductInput = {
    id?: string
    image_url: string
  }

  export type Product_imageUncheckedCreateWithoutProductInput = {
    id?: string
    image_url: string
  }

  export type Product_imageCreateOrConnectWithoutProductInput = {
    where: Product_imageWhereUniqueInput
    create: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput>
  }

  export type Product_imageCreateManyProductInputEnvelope = {
    data: Product_imageCreateManyProductInput | Product_imageCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type Order_itemsCreateWithoutProductInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    order: OrderCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_itemsUncheckedCreateWithoutProductInput = {
    id?: string
    orderId: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
  }

  export type Order_itemsCreateOrConnectWithoutProductInput = {
    where: Order_itemsWhereUniqueInput
    create: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput>
  }

  export type Order_itemsCreateManyProductInputEnvelope = {
    data: Order_itemsCreateManyProductInput | Order_itemsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type Cart_itemsUpsertWithWhereUniqueWithoutProductInput = {
    where: Cart_itemsWhereUniqueInput
    update: XOR<Cart_itemsUpdateWithoutProductInput, Cart_itemsUncheckedUpdateWithoutProductInput>
    create: XOR<Cart_itemsCreateWithoutProductInput, Cart_itemsUncheckedCreateWithoutProductInput>
  }

  export type Cart_itemsUpdateWithWhereUniqueWithoutProductInput = {
    where: Cart_itemsWhereUniqueInput
    data: XOR<Cart_itemsUpdateWithoutProductInput, Cart_itemsUncheckedUpdateWithoutProductInput>
  }

  export type Cart_itemsUpdateManyWithWhereWithoutProductInput = {
    where: Cart_itemsScalarWhereInput
    data: XOR<Cart_itemsUpdateManyMutationInput, Cart_itemsUncheckedUpdateManyWithoutProductInput>
  }

  export type Product_categoryUpsertWithWhereUniqueWithoutProductInput = {
    where: Product_categoryWhereUniqueInput
    update: XOR<Product_categoryUpdateWithoutProductInput, Product_categoryUncheckedUpdateWithoutProductInput>
    create: XOR<Product_categoryCreateWithoutProductInput, Product_categoryUncheckedCreateWithoutProductInput>
  }

  export type Product_categoryUpdateWithWhereUniqueWithoutProductInput = {
    where: Product_categoryWhereUniqueInput
    data: XOR<Product_categoryUpdateWithoutProductInput, Product_categoryUncheckedUpdateWithoutProductInput>
  }

  export type Product_categoryUpdateManyWithWhereWithoutProductInput = {
    where: Product_categoryScalarWhereInput
    data: XOR<Product_categoryUpdateManyMutationInput, Product_categoryUncheckedUpdateManyWithoutProductInput>
  }

  export type Product_categoryScalarWhereInput = {
    AND?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
    OR?: Product_categoryScalarWhereInput[]
    NOT?: Product_categoryScalarWhereInput | Product_categoryScalarWhereInput[]
    id?: StringFilter<"Product_category"> | string
    categoryId?: StringFilter<"Product_category"> | string
    productId?: StringFilter<"Product_category"> | string
  }

  export type Product_imageUpsertWithWhereUniqueWithoutProductInput = {
    where: Product_imageWhereUniqueInput
    update: XOR<Product_imageUpdateWithoutProductInput, Product_imageUncheckedUpdateWithoutProductInput>
    create: XOR<Product_imageCreateWithoutProductInput, Product_imageUncheckedCreateWithoutProductInput>
  }

  export type Product_imageUpdateWithWhereUniqueWithoutProductInput = {
    where: Product_imageWhereUniqueInput
    data: XOR<Product_imageUpdateWithoutProductInput, Product_imageUncheckedUpdateWithoutProductInput>
  }

  export type Product_imageUpdateManyWithWhereWithoutProductInput = {
    where: Product_imageScalarWhereInput
    data: XOR<Product_imageUpdateManyMutationInput, Product_imageUncheckedUpdateManyWithoutProductInput>
  }

  export type Product_imageScalarWhereInput = {
    AND?: Product_imageScalarWhereInput | Product_imageScalarWhereInput[]
    OR?: Product_imageScalarWhereInput[]
    NOT?: Product_imageScalarWhereInput | Product_imageScalarWhereInput[]
    id?: StringFilter<"Product_image"> | string
    image_url?: StringFilter<"Product_image"> | string
    productId?: StringFilter<"Product_image"> | string
  }

  export type Order_itemsUpsertWithWhereUniqueWithoutProductInput = {
    where: Order_itemsWhereUniqueInput
    update: XOR<Order_itemsUpdateWithoutProductInput, Order_itemsUncheckedUpdateWithoutProductInput>
    create: XOR<Order_itemsCreateWithoutProductInput, Order_itemsUncheckedCreateWithoutProductInput>
  }

  export type Order_itemsUpdateWithWhereUniqueWithoutProductInput = {
    where: Order_itemsWhereUniqueInput
    data: XOR<Order_itemsUpdateWithoutProductInput, Order_itemsUncheckedUpdateWithoutProductInput>
  }

  export type Order_itemsUpdateManyWithWhereWithoutProductInput = {
    where: Order_itemsScalarWhereInput
    data: XOR<Order_itemsUpdateManyMutationInput, Order_itemsUncheckedUpdateManyWithoutProductInput>
  }

  export type Order_itemsScalarWhereInput = {
    AND?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
    OR?: Order_itemsScalarWhereInput[]
    NOT?: Order_itemsScalarWhereInput | Order_itemsScalarWhereInput[]
    id?: StringFilter<"Order_items"> | string
    orderId?: StringFilter<"Order_items"> | string
    price?: DecimalFilter<"Order_items"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"Order_items"> | number
    productId?: StringFilter<"Order_items"> | string
  }

  export type ProductCreateWithoutProduct_imageInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProduct_imageInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryUncheckedCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProduct_imageInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
  }

  export type ProductUpsertWithoutProduct_imageInput = {
    update: XOR<ProductUpdateWithoutProduct_imageInput, ProductUncheckedUpdateWithoutProduct_imageInput>
    create: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProduct_imageInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProduct_imageInput, ProductUncheckedUpdateWithoutProduct_imageInput>
  }

  export type ProductUpdateWithoutProduct_imageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProduct_imageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUncheckedUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type CategoryCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
  }

  export type CategoryUncheckedCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
  }

  export type CategoryCreateOrConnectWithoutProduct_categoryInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProduct_categoryInput, CategoryUncheckedCreateWithoutProduct_categoryInput>
  }

  export type ProductCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsCreateNestedManyWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutProductInput
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductInput
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProduct_categoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
  }

  export type CategoryUpsertWithoutProduct_categoryInput = {
    update: XOR<CategoryUpdateWithoutProduct_categoryInput, CategoryUncheckedUpdateWithoutProduct_categoryInput>
    create: XOR<CategoryCreateWithoutProduct_categoryInput, CategoryUncheckedCreateWithoutProduct_categoryInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProduct_categoryInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProduct_categoryInput, CategoryUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type CategoryUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpsertWithoutProduct_categoryInput = {
    update: XOR<ProductUpdateWithoutProduct_categoryInput, ProductUncheckedUpdateWithoutProduct_categoryInput>
    create: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProduct_categoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProduct_categoryInput, ProductUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type ProductUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductNestedInput
    Order_items?: Order_itemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type Product_categoryCreateWithoutCategoryInput = {
    id?: string
    product: ProductCreateNestedOneWithoutProduct_categoryInput
  }

  export type Product_categoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    productId: string
  }

  export type Product_categoryCreateOrConnectWithoutCategoryInput = {
    where: Product_categoryWhereUniqueInput
    create: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type Product_categoryCreateManyCategoryInputEnvelope = {
    data: Product_categoryCreateManyCategoryInput | Product_categoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type Product_categoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: Product_categoryWhereUniqueInput
    update: XOR<Product_categoryUpdateWithoutCategoryInput, Product_categoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<Product_categoryCreateWithoutCategoryInput, Product_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type Product_categoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: Product_categoryWhereUniqueInput
    data: XOR<Product_categoryUpdateWithoutCategoryInput, Product_categoryUncheckedUpdateWithoutCategoryInput>
  }

  export type Product_categoryUpdateManyWithWhereWithoutCategoryInput = {
    where: Product_categoryScalarWhereInput
    data: XOR<Product_categoryUpdateManyMutationInput, Product_categoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserCreateWithoutShipping_addressInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Orders?: OrderCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShipping_addressInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShipping_addressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShipping_addressInput, UserUncheckedCreateWithoutShipping_addressInput>
  }

  export type OrderCreateWithoutShipping_addressInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    payment_method: Payment_methodCreateNestedOneWithoutOrdersInput
    user?: UserCreateNestedOneWithoutOrdersInput
    shipping_method: Shipping_methodCreateNestedOneWithoutOrdersInput
    Order_items?: Order_itemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutShipping_addressInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutShipping_addressInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
  }

  export type OrderCreateManyShipping_addressInputEnvelope = {
    data: OrderCreateManyShipping_addressInput | OrderCreateManyShipping_addressInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShipping_addressInput = {
    update: XOR<UserUpdateWithoutShipping_addressInput, UserUncheckedUpdateWithoutShipping_addressInput>
    create: XOR<UserCreateWithoutShipping_addressInput, UserUncheckedCreateWithoutShipping_addressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShipping_addressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShipping_addressInput, UserUncheckedUpdateWithoutShipping_addressInput>
  }

  export type UserUpdateWithoutShipping_addressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Orders?: OrderUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShipping_addressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutShipping_addressInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutShipping_addressInput, OrderUncheckedUpdateWithoutShipping_addressInput>
    create: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutShipping_addressInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutShipping_addressInput, OrderUncheckedUpdateWithoutShipping_addressInput>
  }

  export type OrderUpdateManyWithWhereWithoutShipping_addressInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutShipping_addressInput>
  }

  export type OrderCreateWithoutPayment_methodInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    shipping_address: Shipping_addressCreateNestedOneWithoutOrdersInput
    shipping_method: Shipping_methodCreateNestedOneWithoutOrdersInput
    Order_items?: Order_itemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPayment_methodInput = {
    id?: string
    order_date?: Date | string
    userId?: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPayment_methodInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput>
  }

  export type OrderCreateManyPayment_methodInputEnvelope = {
    data: OrderCreateManyPayment_methodInput | OrderCreateManyPayment_methodInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutPayment_methodInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutPayment_methodInput, OrderUncheckedUpdateWithoutPayment_methodInput>
    create: XOR<OrderCreateWithoutPayment_methodInput, OrderUncheckedCreateWithoutPayment_methodInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutPayment_methodInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutPayment_methodInput, OrderUncheckedUpdateWithoutPayment_methodInput>
  }

  export type OrderUpdateManyWithWhereWithoutPayment_methodInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutPayment_methodInput>
  }

  export type OrderCreateWithoutShipping_methodInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    payment_method: Payment_methodCreateNestedOneWithoutOrdersInput
    user?: UserCreateNestedOneWithoutOrdersInput
    shipping_address: Shipping_addressCreateNestedOneWithoutOrdersInput
    Order_items?: Order_itemsCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutShipping_methodInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_addressId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    Order_items?: Order_itemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutShipping_methodInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput>
  }

  export type OrderCreateManyShipping_methodInputEnvelope = {
    data: OrderCreateManyShipping_methodInput | OrderCreateManyShipping_methodInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutShipping_methodInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutShipping_methodInput, OrderUncheckedUpdateWithoutShipping_methodInput>
    create: XOR<OrderCreateWithoutShipping_methodInput, OrderUncheckedCreateWithoutShipping_methodInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutShipping_methodInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutShipping_methodInput, OrderUncheckedUpdateWithoutShipping_methodInput>
  }

  export type OrderUpdateManyWithWhereWithoutShipping_methodInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutShipping_methodInput>
  }

  export type Payment_methodCreateWithoutOrdersInput = {
    id?: string
    name: string
  }

  export type Payment_methodUncheckedCreateWithoutOrdersInput = {
    id?: string
    name: string
  }

  export type Payment_methodCreateOrConnectWithoutOrdersInput = {
    where: Payment_methodWhereUniqueInput
    create: XOR<Payment_methodCreateWithoutOrdersInput, Payment_methodUncheckedCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email_address?: string | null
    mobile?: string | null
    firstName: string
    lastName: string
    password: string
    createdAt?: Date | string
    updateAt?: Date | string
    role?: $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedCreateNestedManyWithoutUserInput
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type Shipping_addressCreateWithoutOrdersInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    user?: UserCreateNestedOneWithoutShipping_addressInput
  }

  export type Shipping_addressUncheckedCreateWithoutOrdersInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
    userId?: string | null
  }

  export type Shipping_addressCreateOrConnectWithoutOrdersInput = {
    where: Shipping_addressWhereUniqueInput
    create: XOR<Shipping_addressCreateWithoutOrdersInput, Shipping_addressUncheckedCreateWithoutOrdersInput>
  }

  export type Shipping_methodCreateWithoutOrdersInput = {
    id?: string
    name: string
  }

  export type Shipping_methodUncheckedCreateWithoutOrdersInput = {
    id?: string
    name: string
  }

  export type Shipping_methodCreateOrConnectWithoutOrdersInput = {
    where: Shipping_methodWhereUniqueInput
    create: XOR<Shipping_methodCreateWithoutOrdersInput, Shipping_methodUncheckedCreateWithoutOrdersInput>
  }

  export type Order_itemsCreateWithoutOrderInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    product: ProductCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_itemsUncheckedCreateWithoutOrderInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    productId: string
  }

  export type Order_itemsCreateOrConnectWithoutOrderInput = {
    where: Order_itemsWhereUniqueInput
    create: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput>
  }

  export type Order_itemsCreateManyOrderInputEnvelope = {
    data: Order_itemsCreateManyOrderInput | Order_itemsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type Payment_methodUpsertWithoutOrdersInput = {
    update: XOR<Payment_methodUpdateWithoutOrdersInput, Payment_methodUncheckedUpdateWithoutOrdersInput>
    create: XOR<Payment_methodCreateWithoutOrdersInput, Payment_methodUncheckedCreateWithoutOrdersInput>
    where?: Payment_methodWhereInput
  }

  export type Payment_methodUpdateToOneWithWhereWithoutOrdersInput = {
    where?: Payment_methodWhereInput
    data: XOR<Payment_methodUpdateWithoutOrdersInput, Payment_methodUncheckedUpdateWithoutOrdersInput>
  }

  export type Payment_methodUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Payment_methodUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email_address?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    Shipping_address?: Shipping_addressUncheckedUpdateManyWithoutUserNestedInput
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type Shipping_addressUpsertWithoutOrdersInput = {
    update: XOR<Shipping_addressUpdateWithoutOrdersInput, Shipping_addressUncheckedUpdateWithoutOrdersInput>
    create: XOR<Shipping_addressCreateWithoutOrdersInput, Shipping_addressUncheckedCreateWithoutOrdersInput>
    where?: Shipping_addressWhereInput
  }

  export type Shipping_addressUpdateToOneWithWhereWithoutOrdersInput = {
    where?: Shipping_addressWhereInput
    data: XOR<Shipping_addressUpdateWithoutOrdersInput, Shipping_addressUncheckedUpdateWithoutOrdersInput>
  }

  export type Shipping_addressUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutShipping_addressNestedInput
  }

  export type Shipping_addressUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Shipping_methodUpsertWithoutOrdersInput = {
    update: XOR<Shipping_methodUpdateWithoutOrdersInput, Shipping_methodUncheckedUpdateWithoutOrdersInput>
    create: XOR<Shipping_methodCreateWithoutOrdersInput, Shipping_methodUncheckedCreateWithoutOrdersInput>
    where?: Shipping_methodWhereInput
  }

  export type Shipping_methodUpdateToOneWithWhereWithoutOrdersInput = {
    where?: Shipping_methodWhereInput
    data: XOR<Shipping_methodUpdateWithoutOrdersInput, Shipping_methodUncheckedUpdateWithoutOrdersInput>
  }

  export type Shipping_methodUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Shipping_methodUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Order_itemsUpsertWithWhereUniqueWithoutOrderInput = {
    where: Order_itemsWhereUniqueInput
    update: XOR<Order_itemsUpdateWithoutOrderInput, Order_itemsUncheckedUpdateWithoutOrderInput>
    create: XOR<Order_itemsCreateWithoutOrderInput, Order_itemsUncheckedCreateWithoutOrderInput>
  }

  export type Order_itemsUpdateWithWhereUniqueWithoutOrderInput = {
    where: Order_itemsWhereUniqueInput
    data: XOR<Order_itemsUpdateWithoutOrderInput, Order_itemsUncheckedUpdateWithoutOrderInput>
  }

  export type Order_itemsUpdateManyWithWhereWithoutOrderInput = {
    where: Order_itemsScalarWhereInput
    data: XOR<Order_itemsUpdateManyMutationInput, Order_itemsUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrder_itemsInput = {
    id?: string
    order_date?: Date | string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    payment_method: Payment_methodCreateNestedOneWithoutOrdersInput
    user?: UserCreateNestedOneWithoutOrdersInput
    shipping_address: Shipping_addressCreateNestedOneWithoutOrdersInput
    shipping_method: Shipping_methodCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutOrder_itemsInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutOrder_itemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ProductCreateWithoutOrder_itemsInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryCreateNestedManyWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrder_itemsInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    SKU: string
    brand?: string | null
    stock?: number | null
    desc?: string | null
    menu_order?: number | null
    isFeatured?: boolean | null
    Cart_items?: Cart_itemsUncheckedCreateNestedManyWithoutProductInput
    Product_category?: Product_categoryUncheckedCreateNestedManyWithoutProductInput
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrder_itemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
  }

  export type OrderUpsertWithoutOrder_itemsInput = {
    update: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type OrderUpdateWithoutOrder_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: Payment_methodUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneWithoutOrdersNestedInput
    shipping_address?: Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput
    shipping_method?: Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrder_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutOrder_itemsInput = {
    update: XOR<ProductUpdateWithoutOrder_itemsInput, ProductUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrder_itemsInput, ProductUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ProductUpdateWithoutOrder_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrder_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    SKU?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    menu_order?: NullableIntFieldUpdateOperationsInput | number | null
    isFeatured?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Cart_items?: Cart_itemsUncheckedUpdateManyWithoutProductNestedInput
    Product_category?: Product_categoryUncheckedUpdateManyWithoutProductNestedInput
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductNestedInput
  }

  export type Shipping_addressCreateManyUserInput = {
    id?: string
    email: string
    phone: string
    firstName: string
    lastName: string
    street_address: string
    sub_district: string
    district: string
    province: string
    zip: string
  }

  export type OrderCreateManyUserInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type Cart_itemsCreateManyUserInput = {
    id?: string
    qty: number
    productId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type Shipping_addressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUpdateManyWithoutShipping_addressNestedInput
  }

  export type Shipping_addressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    Orders?: OrderUncheckedUpdateManyWithoutShipping_addressNestedInput
  }

  export type Shipping_addressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    street_address?: StringFieldUpdateOperationsInput | string
    sub_district?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: Payment_methodUpdateOneRequiredWithoutOrdersNestedInput
    shipping_address?: Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput
    shipping_method?: Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput
    Order_items?: Order_itemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order_items?: Order_itemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Cart_itemsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutCart_itemsNestedInput
  }

  export type Cart_itemsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Cart_itemsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Cart_itemsCreateManyProductInput = {
    id?: string
    qty: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId?: string | null
  }

  export type Product_categoryCreateManyProductInput = {
    id?: string
    categoryId: string
  }

  export type Product_imageCreateManyProductInput = {
    id?: string
    image_url: string
  }

  export type Order_itemsCreateManyProductInput = {
    id?: string
    orderId: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
  }

  export type Cart_itemsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCart_itemsNestedInput
  }

  export type Cart_itemsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Cart_itemsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Product_categoryUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type Product_categoryUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_categoryUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_imageUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type Product_imageUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type Product_imageUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type Order_itemsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type Order_itemsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type Order_itemsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type Product_categoryCreateManyCategoryInput = {
    id?: string
    productId: string
  }

  export type Product_categoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type Product_categoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Product_categoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateManyShipping_addressInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type OrderUpdateWithoutShipping_addressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: Payment_methodUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneWithoutOrdersNestedInput
    shipping_method?: Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput
    Order_items?: Order_itemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutShipping_addressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order_items?: Order_itemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutShipping_addressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateManyPayment_methodInput = {
    id?: string
    order_date?: Date | string
    userId?: string | null
    shipping_addressId: string
    shipping_methodId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type OrderUpdateWithoutPayment_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    shipping_address?: Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput
    shipping_method?: Shipping_methodUpdateOneRequiredWithoutOrdersNestedInput
    Order_items?: Order_itemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPayment_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order_items?: Order_itemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutPayment_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    shipping_methodId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateManyShipping_methodInput = {
    id?: string
    order_date?: Date | string
    payment_methodId: string
    userId?: string | null
    shipping_addressId: string
    total_amount: Decimal | DecimalJsLike | number | string
    order_status: $Enums.OrderStatus
    order_number?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type OrderUpdateWithoutShipping_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: Payment_methodUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneWithoutOrdersNestedInput
    shipping_address?: Shipping_addressUpdateOneRequiredWithoutOrdersNestedInput
    Order_items?: Order_itemsUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutShipping_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order_items?: Order_itemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutShipping_methodInput = {
    id?: StringFieldUpdateOperationsInput | string
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_methodId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    shipping_addressId?: StringFieldUpdateOperationsInput | string
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order_status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Order_itemsCreateManyOrderInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    qty: number
    productId: string
  }

  export type Order_itemsUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type Order_itemsUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type Order_itemsUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Shipping_addressCountOutputTypeDefaultArgs instead
     */
    export type Shipping_addressCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Shipping_addressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Payment_methodCountOutputTypeDefaultArgs instead
     */
    export type Payment_methodCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Payment_methodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Shipping_methodCountOutputTypeDefaultArgs instead
     */
    export type Shipping_methodCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Shipping_methodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Contact_formDefaultArgs instead
     */
    export type Contact_formArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Contact_formDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Cart_itemsDefaultArgs instead
     */
    export type Cart_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Cart_itemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Product_imageDefaultArgs instead
     */
    export type Product_imageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Product_imageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Product_categoryDefaultArgs instead
     */
    export type Product_categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Product_categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Shipping_addressDefaultArgs instead
     */
    export type Shipping_addressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Shipping_addressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Payment_methodDefaultArgs instead
     */
    export type Payment_methodArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Payment_methodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Shipping_methodDefaultArgs instead
     */
    export type Shipping_methodArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Shipping_methodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Order_itemsDefaultArgs instead
     */
    export type Order_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Order_itemsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}